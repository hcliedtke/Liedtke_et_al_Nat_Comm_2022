edge.label.cex=2,
#minimum=0.001, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
}
tr_plots(best_tr, title="Best Fit")
# plotting fucntion for tranistion rates
rate_plots<-function(tr_rates,states=c("A","S","D","P","V"), state_codes, title) {
ordered_rates<-tr_rates[match(states, state_codes), match(states, state_codes)]
qgraph(title=title,
ordered_rates,
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=ordered_rates,
edge.label.cex=2,
#minimum=0.001, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
}
## plot both
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
tr_plots(best_tr, title="Number of transitions")
rate_plots(round(best_fit$solution,4), state_codes=states.codes, title="Transition rates")
pdf("caudata_transitions_joint.pdf", paper="a4", width=11, height=8)
tr_plots(best_tr, title="Number of transitions")
rate_plots(round(best_fit$solution,4), state_codes=states.codes, title="Transition rates")
dev.off()
## plot both
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
pdf("caudata_transitions_joint.pdf", paper="a4", width=11, height=8)
tr_plots(best_tr, title="Number of transitions")
rate_plots(round(best_fit$solution,4), state_codes=states.codes, title="Transition rates")
dev.off()
pdf("caudata_transitions_joint.pdf", width=11, height=8)
tr_plots(best_tr, title="Number of transitions")
rate_plots(round(best_fit$solution,4), state_codes=states.codes, title="Transition rates")
dev.off()
## plot both
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
pdf("caudata_transitions_joint.pdf", width=11, height=8)
tr_plots(best_tr, title="Number of transitions")
rate_plots(round(best_fit$solution,4), state_codes=states.codes, title="Transition rates")
dev.off()
pdf("caudata_transitions_joint.pdf", width=11, height=8)
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
tr_plots(best_tr, title="Number of transitions")
rate_plots(round(best_fit$solution,4), state_codes=states.codes, title="Transition rates")
dev.off()
pdf("caudata_transitions_joint.pdf", paper="a4",width=11, height=8)
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
tr_plots(best_tr, title="Number of transitions")
rate_plots(round(best_fit$solution,4), state_codes=states.codes, title="Transition rates")
dev.off()
pdf("caudata_transitions_joint.pdf",width=11, height=8)
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
tr_plots(best_tr, title="Number of transitions")
rate_plots(round(best_fit$solution,4), state_codes=states.codes, title="Transition rates")
dev.off()
### save
save.image("caudata_anc_joint.RData")
source("../../aux_scripts/find_transitions.R")
##############################################################################################
# load corHMM results from previous script [_run_corHMM_caudata.R]
corHMM_fit<-readRDS("../corHMM_fit_caudata.rds")
fit_sum<-read_csv("../caudata_fit_summary.csv")
head(fit_sum)
best_fit<-fit_sum[min(fit_sum$AIC)==fit_sum$AIC,]$models
best_fit
best_fit<-corHMM_fit[[best_fit]]
best_fit_sim<-makeSimmap(tree = best_fit$phy,
data = best_fit$data,
model = best_fit$solution,
rate.cat = best_fit$rate.cat,
root.p= best_fit$root.p,
nSim=1,
nCores=8)
class(best_fit_sim)<-c("multiSimmap","multiPhylo")
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/corHMM/caudata/anc_states_simmap/")
# load previous run
load("anc_states_simmap.RData")
saveRDS(best_fit_sim, "anc_states_simmap.rds")
source("../../aux_scripts/find_transitions.R")
##############################################################################################
# load corHMM results from previous script [_run_corHMM_caudata.R]
corHMM_fit<-readRDS("../corHMM_fit_caudata.rds")
fit_sum<-read_csv("../caudata_fit_summary.csv")
head(fit_sum)
#############################################################################################
#### defined the best fitting model (based on AIC) and extract model results
best_fit<-fit_sum[min(fit_sum$AIC)==fit_sum$AIC,]$models
best_fit
best_fit<-corHMM_fit[[best_fit]]
#############################################################################################
# load previous run
readRDS("anc_states_simmap.rds")
# load previous run
best_fit_sim<-readRDS("anc_states_simmap.rds")
rep.cols1<-c("A"="#24b9e9",
"S"="#009E73",
"T"="#BF9C00",
"D"="#55FF7E",
"V"="#f6776f",
"P"="gold",
"none"="#ebebeb")
rep.cols1
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
states<-c("A","D","P","S","V")
names(states)<-as.character(1:5)
node_states_max<-states[as.character(apply(X = best_fit_simmap$ace, M=1, FUN = which.max))]
node_states_max<-states[as.character(apply(X = best_fit_sim$ace, M=1, FUN = which.max))]
states<-c("A","D","P","S","V")
names(states)<-as.character(1:5)
node_states_max<-states[as.character(apply(X = best_fit_sim$ace, M=1, FUN = which.max))]
load("anc_states_simmap.RData")
# save
saveRDS(best_fit_sim, "anc_states_simm.rds")
saveRDS(best_fit_simmap, "anc_states_simmap.rds")
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/corHMM/caudata/anc_states_simmap/")
library(ape)
library(geiger)
library(phytools)
library(corHMM)
library(tidyverse)
library(qgraph)
library(phytools)
### load custom functions
source("../../aux_scripts/find_transitions.R")
##############################################################################################
# load corHMM results from previous script [_run_corHMM_caudata.R]
corHMM_fit<-readRDS("../corHMM_fit_caudata.rds")
fit_sum<-read_csv("../caudata_fit_summary.csv")
head(fit_sum)
#############################################################################################
#### defined the best fitting model (based on AIC) and extract model results
best_fit<-fit_sum[min(fit_sum$AIC)==fit_sum$AIC,]$models
best_fit
best_fit<-corHMM_fit[[best_fit]]
# load previous run
best_fit_sim<-readRDS("anc_states_sim.rds")
best_fit_simmap<-readRDS("anc_states_simmap.rds")
# load previous run
best_fit_sim<-readRDS("anc_states_sim.rds")
rep.cols1<-c("A"="#24b9e9",
"S"="#009E73",
"T"="#BF9C00",
"D"="#55FF7E",
"V"="#f6776f",
"P"="gold",
"none"="#ebebeb")
rep.cols1
### make painted map for final tree
states<-c("A","D","P","S","V")
names(states)<-as.character(1:5)
node_states_max<-states[as.character(apply(X = best_fit_simmap$ace, M=1, FUN = which.max))]
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
phy_painted<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states_max,
simmap = T,
stem_prop = 1)
phy_painted<-find_transitions(phy=best_fit$phy,
tip_states = tip_states,
node_states = node_states_max,
simmap = T,
stem_prop = 1)
pdf("caudata_best_stochmap.pdf", paper="a4", width=8, height=11)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.1, lw=1, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[tip_states], cex=0.2, adj = 1.2)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.25)
dev.off()
tr_tbl<-function(x) {
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n) %>%
filter(n>0)
# recode
tr$from<-cat_factors[tr$from]
tr$to<-cat_factors[tr$to]
return(tr)
}
(best_tr<-tr_tbl(x=best_fit_simmap$count) )
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n) %>%
filter(n>0)
tr_tbl<-function(x) {
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n) %>%
filter(n>0)
return(tr)
}
(best_tr<-tr_tbl(x=best_fit_simmap$count) )
# make plotting function
#### see full list of graphic arguments here: https://cran.r-project.org/web/packages/qgraph/qgraph.pdf
tr_plots<-function(tr_counts, states=c("A","S","P","D","V"), title) {
qgraph(title=title,
tr_counts,
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=T,
edge.label.cex=2,
#minimum=0.01, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
}
tr_plots(best_tr, title="Mean Stochastic transitions")
best_tr
# make plotting function
#### see full list of graphic arguments here: https://cran.r-project.org/web/packages/qgraph/qgraph.pdf
tr_plots<-function(tr_counts, states=c("A","S","P","D","V"), title) {
qgraph(title=title,
tr_counts,
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=T,
edge.label.cex=2,
#minimum=0.01, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
}
tr_plots(best_tr, title="Mean Stochastic transitions")
tr_plots(best_tr, title="Best Fit")
tr_counts
tr_counts = best_tr
states=c("A","S","P","D","V")
title="Mean Stochastic transitions"
qgraph(title=title,
tr_counts,
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=T,
edge.label.cex=2,
#minimum=0.01, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
rep.cols1[states]
states
qgraph(title=title,
tr_counts,
#nodes:
labels=states,
#shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=T,
edge.label.cex=2,
#minimum=0.01, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
tr_counts
tr_tbl<-function(x) {
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n) #%>%
#filter(n>0)
return(tr)
}
(best_tr<-tr_tbl(x=best_fit_simmap$count) )
# make plotting function
#### see full list of graphic arguments here: https://cran.r-project.org/web/packages/qgraph/qgraph.pdf
tr_plots<-function(tr_counts, states=c("A","S","P","D","V"), title) {
qgraph(title=title,
tr_counts,
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=T,
edge.label.cex=2,
#minimum=0.01, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
}
pdf("caudata_transitions_joint.pdf",width=11, height=8)
dev.off()
tr_plots(tr_counts = best_tr, title="Mean Stochastic transitions")
tr_tbl<-function(x) {
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n)#%>%
filter(n>0)
return(tr)
}
(best_tr<-tr_tbl(x=best_fit_simmap$count) )
tr_tbl<-function(x) {
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n)#%>%
filter(n>0)
return(tr)
}
(best_tr<-tr_tbl(x=best_fit_simmap$count) )
tr_counts
qgraph
# make plotting function
#### see full list of graphic arguments here: https://cran.r-project.org/web/packages/qgraph/qgraph.pdf
tr_plots<-function(tr_counts, states=c("A","S","P","D","V"), title) {
qgraph(title=title,
tr_counts,
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=T,
edge.label.cex=2,
#minimum=0.01, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
}
tr_plots(tr_counts = best_tr, title="Mean Stochastic transitions")
qgraph(title=title,
tr_counts,
#nodes:
labels=states,
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=T,
edge.label.cex=2,
#minimum=0.01, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
qgraph(title=title,
tr_counts,
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=T,
edge.label.cex=2,
#minimum=0.01, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
best_fit_simmap$times %>%
as.data.frame() %>%
mutate_at(vars(-total), ~ ./total*100) %>% # convert to percentage
select(-total) %>%
#  summarise_all(mean) %>%
pivot_longer(everything(), names_to="state",values_to="total_time") %>%
mutate(state=factor(cat_factors[state], levels=c("A","S","D","V","P"))) %>%
ggplot(aes(x=state, y=total_time, fill=state)) +
geom_violin(scale="area") +
scale_fill_manual(values = rep.cols1) +
theme_bw() +
theme(legend.position = "none") +
ggtitle("best fit: Percentage of total time spent in each state")
best_fit_simmap$times %>%
as.data.frame() %>%
mutate_at(vars(-total), ~ ./total*100) %>% # convert to percentage
select(-total) %>%
#  summarise_all(mean) %>%
pivot_longer(everything(), names_to="state",values_to="total_time") %>%
#mutate(state=factor(cat_factors[state], levels=c("A","S","D","V","P"))) %>%
ggplot(aes(x=state, y=total_time, fill=state)) +
geom_violin(scale="area") +
scale_fill_manual(values = rep.cols1) +
theme_bw() +
theme(legend.position = "none") +
ggtitle("best fit: Percentage of total time spent in each state")
best_fit_simmap$times %>%
as.data.frame() %>%
mutate_at(vars(-total), ~ ./total*100) %>% # convert to percentage
select(-total) %>%
#  summarise_all(mean) %>%
pivot_longer(everything(), names_to="state",values_to="total_time")
states
tr_plots(tr_counts = best_tr, title="Mean Stochastic transitions")
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
tr_plots(tr_counts = best_tr, title="Mean Stochastic transitions")
