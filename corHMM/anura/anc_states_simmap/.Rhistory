library(geiger)
library(phytools)
library(corHMM)
library(tidyverse)
library(qgraph)
load("caudata_anc_joint.RData")
node_states_ard<-states.codes[as.character(ard_fit$states)]
phy_painted_ard<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states_ard,
simmap = T,
stem_prop = 0.1)
ainted phylognies
### define tip states coding
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
## ARD
### paint branches with most likely state:
states.codes<-c("A","D","P","S","V")
names(states.codes)<-as.character(1:5)
source("~/My Cloud/my_r_functions/find_transitions.R")
node_states_ard<-states.codes[as.character(ard_fit$states)]
phy_painted_ard<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states_ard,
simmap = T,
stem_prop = 0.1)
node_states_best<-states.codes[as.character(best_fit$states)]
phy_painted_best<-find_transitions(phy=best_fit$phy,
tip_states = tip_states,
node_states = node_states_best,
simmap = T,
stem_prop = 0.1)
#####
# HMM models
states.codes.hmm<-rep(c("A","D","P","S","V"),2)
names(states.codes.hmm)<-as.character(1:10)
# ARD HMM
node_states_ard_hmm<-states.codes.hmm[as.character(ard_hmm_fit$states)]
phy_painted_ard_hmm<-find_transitions(phy=ard_hmm_fit$phy,
tip_states = tip_states,
node_states = node_states_ard_hmm,
simmap = T,
stem_prop = 0.1)
# Best hmm fit
node_states_best_hmm<-states.codes.hmm[as.character(best_hmm_fit$states)]
phy_painted_best_hmm<-find_transitions(phy=best_hmm_fit$phy,
tip_states = tip_states,
node_states = node_states_best_hmm,
simmap = T,
stem_prop = 0.1)
#########
### transitions
(ard_tr<-countSimmap(phy_painted_ard)$Tr)
(best_tr<-countSimmap(phy_painted_best)$Tr)
(ard_hmm_tr<-countSimmap(phy_painted_ard_hmm)$Tr)
(best_hmm_tr<-countSimmap(phy_painted_best_hmm)$Tr)
phy_painted_best2<-find_transitions(phy=best_fit$phy,
tip_states = tip_states,
node_states = node_states_best,
simmap = T,
stem_prop = 0.0000001)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted_best2, fsize=0.1, lw=1, colors = rep.cols1)
nodelabels(pch=19, col=rep.cols1[c("A","D","P","S","V")[best_fit$states]], cex=0.5)
tiplabels(pch=15, col=rep.cols1[tip_states], cex=0.2, adj = 1.2)
legend("bottomleft", bty="n", pch=19, col=rep.cols1[unique(tip_states)],
legend=unique(tip_states),
title=paste0("Best Fit, AIC: ", round(best_fit$AIC, 3)))
setwd("~/Documents/amphibian_diversity_project/2021/corHMM/gymno/anc_states_joint/")
library(ape)
library(geiger)
library(phytools)
library(corHMM)
library(tidyverse)
library(qgraph)
##############################################################################################
# load corHMM results
corHMM_fit<-readRDS("../corHMM_fit_gymno.rds")
fit_sum<-read_csv("../gymno_fit_summary.csv")
head(fit_sum)
# remove HMM2 models
fit_sum <- fit_sum %>%
filter(!str_detect(models, "HMM2"))
#############################################################################################
# check to see if ard and ard_HMM have ancestral states reconstructed
ard_fit<-corHMM_fit$ard
ard_hmm_fit<-corHMM_fit$HMM_ard
# check if ancestral states have been reconstructed (should have states)
ard_fit$states[1,]
ard_hmm_fit$states[1,]
# extract best fitting model without hidden states (in this case it is ard_fit)
best_fit<-corHMM_fit[["serial_er"]]
best_fit$states[1,]
# extract best fitting model wit hidden states
best_hmm_fit<-corHMM_fit[["HMM_serial_er"]]
best_hmm_fit$states[1,]
#############################################################################################
#### function for preparing parameters in the right order for ancRECON
#- index: index matrix
#- q: parameter matrix
p<-function(index, q) {
sapply(1:max(index, na.rm = TRUE),
function(x) na.omit(c(q))[na.omit(c(index) == x)][1])
}
# reconstruct ancestral states
ard_fit_params <- p(index=ard_fit$index.mat, q=ard_fit$solution)
ard_fit_anc<-ancRECON(phy = ard_fit$phy,
data = ard_fit$data,
p = ard_fit_params,
method = "joint",
get.tip.states = TRUE,
rate.cat = ard_fit$rate.cat,
rate.mat = ard_fit$index.mat,
root.p = ard_fit$root.p)
## add states to corHMM object
ard_fit$states<-ard_fit_anc$lik.anc.states
best_fit_params <- p(index=best_fit$index.mat, q=best_fit$solution)
best_fit_anc<-ancRECON(phy = best_fit$phy,
data = best_fit$data,
p = best_fit_params,
method = "joint",
get.tip.states = TRUE,
rate.cat = best_fit$rate.cat,
rate.mat = best_fit$index.mat,
root.p = best_fit$root.p)
## add states to corHMM object
best_fit$states<-best_fit_anc$lik.anc.states
#### hidden models
ard_hmm_fit_params <- p(index=ard_hmm_fit$index.mat, q=ard_hmm_fit$solution)
ard_hmm_fit_anc<-ancRECON(phy = ard_hmm_fit$phy,
data = ard_hmm_fit$data,
p = ard_hmm_fit_params,
method = "joint",
get.tip.states = TRUE,
rate.cat = ard_hmm_fit$rate.cat,
rate.mat = ard_hmm_fit$index.mat,
root.p = ard_hmm_fit$root.p)
## add states to corHMM object
ard_hmm_fit$states<-ard_hmm_fit_anc$lik.anc.states
best_hmm_fit_params <- p(index=best_hmm_fit$index.mat, q=best_hmm_fit$solution)
best_hmm_fit_anc<-ancRECON(phy = best_hmm_fit$phy,
data = best_hmm_fit$data,
p = best_hmm_fit_params,
method = "joint",
get.tip.states = TRUE,
rate.cat = best_hmm_fit$rate.cat,
rate.mat = best_hmm_fit$index.mat,
root.p = best_hmm_fit$root.p)
## add states to corHMM object
best_hmm_fit$states<-best_hmm_fit_anc$lik.anc.states
###### save RData
save.image("gymno_anc_joint.RData")
#load("gymno_anc_joint.RData")
###### painted phylognies
### define tip states coding
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
## ARD
### paint branches with most likely state:
states.codes<-c("D","S","V")
names(states.codes)<-as.character(1:3)
source("~/My Cloud/my_r_functions/find_transitions.R")
node_states_ard<-states.codes[as.character(ard_fit$states)]
phy_painted_ard<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states_ard,
simmap = T,
stem_prop = 0.25)
node_states_best<-states.codes[as.character(best_fit$states)]
phy_painted_best<-find_transitions(phy=best_fit$phy,
tip_states = tip_states,
node_states = node_states_best,
simmap = T,
stem_prop = 0.25)
#####
# HMM models
states.codes.hmm<-rep(c("D","S","V"),2)
names(states.codes.hmm)<-as.character(1:6)
# ARD HMM
node_states_ard_hmm<-states.codes.hmm[as.character(ard_hmm_fit$states)]
phy_painted_ard_hmm<-find_transitions(phy=ard_hmm_fit$phy,
tip_states = tip_states,
node_states = node_states_ard_hmm,
simmap = T,
stem_prop = 0.25)
# Best hmm fit
node_states_best_hmm<-states.codes.hmm[as.character(best_hmm_fit$states)]
phy_painted_best_hmm<-find_transitions(phy=best_hmm_fit$phy,
tip_states = tip_states,
node_states = node_states_best_hmm,
simmap = T,
stem_prop = 0.25)
#########
### plot side by side
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
source("~/Documents/amphibian_diversity_project/2021/data/_colour_schemes.R")
### no hidden states
plotSimmap(phy_painted_ard, fsize=0.5, lw=1, colors = rep.cols1)
legend("bottomleft", bty="n", pch=19, col=rep.cols1[unique(tip_states)],
legend=unique(tip_states),
title=paste0("ARD, AIC: ", round(ard_fit$AIC, 3)))
plotSimmap(phy_painted_best, fsize=0.5, lw=1, colors = rep.cols1)
legend("bottomleft", bty="n", pch=19, col=rep.cols1[unique(tip_states)],
legend=unique(tip_states),
title=paste0("Best Fit, AIC: ", round(best_fit$AIC, 3)))
### hidden states
plotSimmap(phy_painted_ard_hmm, fsize=0.5, lw=1, colors = rep.cols1)
legend("bottomleft", bty="n", pch=19, col=rep.cols1[unique(tip_states)],
legend=unique(tip_states),
title=paste0("ARD HMM, AIC: ", round(ard_hmm_fit$AIC, 3)))
plotSimmap(phy_painted_best_hmm, fsize=0.5, lw=1, colors = rep.cols1)
legend("bottomleft", bty="n", pch=19, col=rep.cols1[unique(tip_states)],
legend=unique(tip_states),
title=paste0("Best HMM, AIC: ", round(best_hmm_fit$AIC, 3)))
# export height: 40
#####
### transitions
(ard_tr<-countSimmap(phy_painted_ard)$Tr)
(best_tr<-countSimmap(phy_painted_best)$Tr)
(ard_hmm_tr<-countSimmap(phy_painted_ard_hmm)$Tr)
(best_hmm_tr<-countSimmap(phy_painted_best_hmm)$Tr)
### make final plot
phy_painted_best2<-find_transitions(phy=best_fit$phy,
tip_states = tip_states,
node_states = node_states_best,
simmap = T,
stem_prop = 0.0000001)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted_best2, fsize=0.7, lw=2, colors = rep.cols1)
nodelabels(pch=19, col=rep.cols1[c("D","S","V")[best_fit$states]], cex=1)
tiplabels(pch=15, col=rep.cols1[tip_states], cex=1, adj = 1.2)
legend("bottomleft", bty="n", pch=19, col=rep.cols1[unique(tip_states)],
legend=unique(tip_states),
title=paste0("Best Fit, AIC: ", round(best_fit$AIC, 3)))
### reconstruct ancestral states for selected models
setwd("~/Documents/amphibian_diversity_project/2021/corHMM/anura_fixed_sym/anc_states_joint/")
load("anura_anc_joint.RData")
### define tip states coding
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
## ARD
### paint branches with most likely state:
states.codes<-c("A","D","S","T","V")
names(states.codes)<-as.character(1:5)
source("~/My Cloud/my_r_functions/find_transitions.R")
#tip_states = states.codes[apply(MAR=1, FUN=which.max, X = ard_fit$tip.states)]
node_states_ard<-states.codes[as.character(ard_fit$states)]
phy_painted_ard<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states_ard,
simmap = T,
stem_prop = 0.25)
node_states_best<-states.codes[as.character(best_fit$states)]
phy_painted_best<-find_transitions(phy=best_fit$phy,
tip_states = tip_states,
node_states = node_states_best,
simmap = T,
stem_prop = 0.25)
#####
# HMM models
states.codes.hmm<-rep(c("A","D","S","T","V"),2)
names(states.codes.hmm)<-as.character(1:10)
# ARD HMM
node_states_ard_hmm<-states.codes.hmm[as.character(ard_hmm_fit$states)]
phy_painted_ard_hmm<-find_transitions(phy=ard_hmm_fit$phy,
tip_states = tip_states,
node_states = node_states_ard_hmm,
simmap = T,
stem_prop = 0.25)
# Best hmm fit
node_states_best_hmm<-states.codes.hmm[as.character(best_hmm_fit$states)]
phy_painted_best_hmm<-find_transitions(phy=best_hmm_fit$phy,
tip_states = tip_states,
node_states = node_states_best_hmm,
simmap = T,
stem_prop = 0.25)
#########
best_hmm_shifts<-find_transitions(phy=best_hmm_fit$phy,
tip_states = tip_states,
node_states = node_states_best_hmm,
simmap = F)
### transitions
(ard_tr<-countSimmap(phy_painted_ard)$Tr)
(best_tr<-countSimmap(phy_painted_best)$Tr)
(ard_hmm_tr<-countSimmap(phy_painted_ard_hmm)$Tr)
(best_hmm_tr<-countSimmap(phy_painted_best_hmm)$Tr)
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
tr_plots(ard_tr, title="ARD")
tr_plots(ard_hmm_tr, title="ARD HMM")
tr_plots(best_tr, title="Best Fit")
tr_plots(best_hmm_tr, title="Best HMM Fit")
save.image("anura_anc_joint.RData")
library(secsse)
setwd("~/Documents/amphibian_diversity_project/2021/corHMM/gymno/anc_states_simmap/")
library(ape)
library(phytools)
library(tidyverse)
load("anc_states_simmap.RData")
plot(best_fit$phy, show.tip.label=F, main="stoch map best fit")
tiplabels(pch=15, col=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.75)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[cat_factors[colnames(best_fit_simmap$ace)]], cex = 0.75)
### make painted map for final tree
source("~/My Cloud/my_r_functions/find_transitions.R")
node_states<-states.codes[as.character(best_fit$states)]
states.codes<-c("D","S","V")
names(states.codes)<-as.character(1:3)
node_states<-states.codes[as.character(best_fit$states)]
tip_states<-best_fit$tip.states
tip_states
tip_states<-best_fit$data$rep_mode1
tip_states
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
phy_painted<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states,
simmap = T,
stem_prop = 0.000001)
ard_fit$phy
tip_states
node_states
best_fit$states
as.character(best_fit_simmap$ace)
best_fit_simmap$ace
apply(X = best_fit_simmap$ace, M=1, FUN = which.max)
sapply(X = best_fit_simmap$ace, M=1, FUN = which.max)
as.character(apply(X = best_fit_simmap$ace, M=1, FUN = which.max)
node_states<-apply(X = best_fit_simmap$ace, M=1, FUN = which.max)
node_states<-apply(X = best_fit_simmap$ace, M=1, FUN = which.max)
states.codes[as.character(node_states)]
node_states_max<-states.codes[as.character(node_states)]
phy_painted<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states,
simmap = T,
stem_prop = 0.000001)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.7, lw=2, colors = rep.cols1)
phy_painted<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states_max,
simmap = T,
stem_prop = 0.000001)
plotSimmap(phy_painted, fsize=0.7, lw=2, colors = rep.cols1)
node_states_max<-states.codes[as.character(apply(X = best_fit_simmap$ace, M=1, FUN = which.max))]
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
phy_painted<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states_max,
simmap = T,
stem_prop = 0.000001)
colnames(best_fit_simmap$ace)
rep.cols1[state.code]
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[state.codes], cex = 0.75)
states<-c("D","S","V")
rm(states.codes)
rm(state.codes)
states<-c("D","S","V")
names(states)<-as.character(1:3)
node_states_max<-states[as.character(apply(X = best_fit_simmap$ace, M=1, FUN = which.max))]
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
phy_painted<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states_max,
simmap = T,
stem_prop = 0.000001)
plotSimmap(phy_painted, fsize=0.7, lw=2, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.75)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.75)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.5)
plotSimmap(phy_painted, fsize=0.7, lw=2, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.75)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.5)
pdf("best_stochmap.pdf", paper="a4")
plotSimmap(phy_painted, fsize=0.7, lw=2, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.75)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.5)
dev.off()
setwd("~/Documents/amphibian_diversity_project/2021/corHMM/caudata_sym_p0.0001/anc_states_simmap/")
library(ape)
library(phytools)
library(tidyverse)
load("anc_states_simmap.RData")
### make painted map for final tree
source("~/My Cloud/my_r_functions/find_transitions.R")
states<-c("A","D","P","S","V")
names(states)<-as.character(1:5)
load("anc_states_simmap.RData")
states<-c("A","D","P","S","V")
names(states)<-as.character(1:5)
node_states_max<-states[as.character(apply(X = best_fit_simmap$ace, M=1, FUN = which.max))]
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
phy_painted<-find_transitions(phy=ard_fit$phy,
tip_states = tip_states,
node_states = node_states_max,
simmap = T,
stem_prop = 0.000001)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.7, lw=2, colors = rep.cols1)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.5)
tiplabels(pch=15, col=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.25)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.5)
pdf("best_stochmap.pdf", paper="a4")
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.4, lw=1, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.25)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.5)
dev.off()
pdf("best_stochmap.pdf", paper="a4", width=8, height=11)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.4, lw=1, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.25)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.5)
dev.off()
pdf("best_stochmap.pdf",width=10, height=20)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.4, lw=1, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.25, adj=1)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.25)
dev.off()
pdf("best_stochmap.pdf",width=10, height=20)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.3, lw=1.25, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.25, adj=1)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.25)
dev.off()
pdf("best_stochmap.pdf",width=10, height=20)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.25, lw=1.25, colors = rep.cols1)
tiplabels(pch=15, bg=NA,piecol=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.25, adj=1)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.25)
dev.off()
pdf("best_stochmap.pdf",width=10, height=20)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.25, lw=1.25, colors = rep.cols1)
tiplabels(pch=15, col=NA, piecol=rep.cols1[as.character(best_fit$data$rep_mode)],cex=0.25, adj=1)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states], cex = 0.25)
dev.off()
setwd("~/Documents/amphibian_diversity_project/2021/corHMM/anura_fixed_sym/anc_states_simmap/")
library(ape)
library(phytools)
library(tidyverse)
best_hmm_fit_merged_simmap<-readRDS("best_hmm_fit_merged_simmap.rds")
states<-c("A","D","S","T","V")
names(states)<-as.character(1:5)
node_states_max<-states[as.character(apply(X = best_hmm_fit_merged_simmap$ace, M=1, FUN = which.max))]
node_states_max
any(is.na(node_states_max))
best_hmm_fit_merged_simmap$tips
dat<-read.csv("../anura.csv")
dat$rep_mode1
tip_states<-dat$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
phy<-read.tree("../anura.tre")
phy_painted<-find_transitions(phy=phy,
tip_states = tip_states,
node_states = node_states_max,
simmap = T,
stem_prop = 0.000001)
### make painted map for final tree
source("~/My Cloud/my_r_functions/find_transitions.R")
states<-c("A","D","S","T","V")
names(states)<-as.character(1:5)
node_states_max<-states[as.character(apply(X = best_hmm_fit_merged_simmap$ace, M=1, FUN = which.max))]
tip_states<-dat$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
phy_painted<-find_transitions(phy=phy,
tip_states = tip_states,
node_states = node_states_max,
simmap = T,
stem_prop = 0.000001)
source("../../../data/_colour_schemes.R")
plotSimmap(phy_painted, fsize=0.25, lw=0.75, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[tip_states],cex=0.25, adj=1)
nodelabels(pie=best_fit_simmap$ace, piecol= rep.cols1[states],col=NA, cex = 0.25)
nodelabels(pie=best_hmm_fit_merged_simmap$ace, piecol= rep.cols1[states],col=NA, cex = 0.25)
pdf("best_stochmap.pdf",width=30, height=50)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.1, lw=1, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[tip_states], cex=0.2, adj = 1)
nodelabels(pie=best_hmm_fit_merged_simmap$ace, piecol= rep.cols1[states], cex = 0.1)
dev.off()
pdf("best_stochmap.pdf",width=30, height=50)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.1, lw=1, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[tip_states], cex=0.2, adj = 1)
nodelabels(pie=best_hmm_fit_merged_simmap$ace, piecol= rep.cols1[states], cex = 0.025)
dev.off()
pdf("best_stochmap.pdf",width=30, height=50)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted, fsize=0.1, lw=1, colors = rep.cols1)
tiplabels(pch=15, col=rep.cols1[tip_states], cex=0.2, adj = 1)
nodelabels(pie=best_hmm_fit_merged_simmap$ace, piecol= rep.cols1[states], cex = 0.05)
dev.off()
