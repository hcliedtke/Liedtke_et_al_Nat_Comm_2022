### create iucn urls
iucn_url <-iucn %>%
mutate(url_iucn=paste0("https://www.iucnredlist.org/species/", internalTaxonId,"/", assessmentId),
species=str_replace(scientificName, " ","_")) %>%
select(species, url_iucn)
iucn_url
### create Aw urls
aw_url <-aw %>%
mutate(url_aw = `uri/guid`,
species = paste0(genus,"_",species)) %>%
select(species, url_aw)
aw_url
### merge urls
all_urls<-dictionary %>%
left_join(iucn_url, by=c("iucn_2019"="species")) %>%
left_join(aw_url, by=c("species_aw_2019"="species")) %>%
select(species_asw_2019,url_aw, url_iucn)
all_urls
aw<-read_tsv("amphweb_2019.txt")
aw
iucn<-read_csv("~/Documents/central_gis_layers/iucn_ranges/amphibians_aug2019/redlist_species_data/simple_summary.csv")
lh<-read_xlsx("../../2021/manuscript/NatComm/SI/SD1_lh_coding.xlsx", sheet=2)
### create iucn urls
iucn_url <-iucn %>%
mutate(url_iucn=paste0("https://www.iucnredlist.org/species/", internalTaxonId,"/", assessmentId),
species=str_replace(scientificName, " ","_")) %>%
select(species, url_iucn)
iucn_url
### create Aw urls
aw_url <-aw %>%
mutate(url_aw = `uri/guid`,
species = paste0(genus,"_",species)) %>%
select(species, url_aw)
aw_url
### merge urls
all_urls<-dictionary %>%
left_join(iucn_url, by=c("iucn_2019"="species")) %>%
left_join(aw_url, by=c("species_aw_2019"="species")) %>%
select(species_asw_2019,url_aw, url_iucn)
all_urls
dictionary<-read_csv("synonyms_2019.csv")
dictionary
dictionary$species_asw_2019[duplicated(dictionary$species_asw_2019)]
dictionary$species_aw_2019[duplicated(dictionary$species_aw_2019)]
dictionary$iucn_2019[duplicated(dictionary$iucn_2019)]
aw<-read_tsv("amphweb_2019.txt")
aw
iucn<-read_csv("~/Documents/central_gis_layers/iucn_ranges/amphibians_aug2019/redlist_species_data/simple_summary.csv")
aw<-read_tsv("amphweb_2019.txt")
aw
problems()
View(aw)
iucn<-read_csv("~/Documents/central_gis_layers/iucn_ranges/amphibians_aug2019/redlist_species_data/simple_summary.csv")
lh<-read_xlsx("../../2021/manuscript/NatComm/SI/SD1_lh_coding.xlsx", sheet=2)
iucn_url <-iucn %>%
mutate(url_iucn=paste0("https://www.iucnredlist.org/species/", internalTaxonId,"/", assessmentId),
species=str_replace(scientificName, " ","_")) %>%
select(species, url_iucn)
iucn_url
aw_url <-aw %>%
mutate(url_aw = `uri/guid`,
species = paste0(genus,"_",species)) %>%
select(species, url_aw)
aw_url
all_urls<-dictionary %>%
left_join(iucn_url, by=c("iucn_2019"="species")) %>%
left_join(aw_url, by=c("species_aw_2019"="species")) %>%
select(species_asw_2019,url_aw, url_iucn)
all_urls
### add more recent AW links
aw_2021<-read_tsv("amphweb_nov2021.txt")
aw_2021
aw_2021<-aw_2021 %>%
mutate(aw_species=paste0(genus,"_",species))
lh2<-lh %>%
left_join(mutate(all_urls, Species=str_replace(species_asw_2019, "_", " "))) %>%
select(-species_asw_2019)
check_lh<-lh2 %>%
filter(is.na(References), is.na(url_aw), is.na(url_iucn))
check_lh<-lh %>%
left_join(mutate(all_urls, Species=str_replace(species_asw_2019, "_", " "))) %>%
select(-species_asw_2019) %>%
filter(is.na(References), is.na(url_aw), is.na(url_iucn))
aw_2021$`uri/guid`[aw_2021$species %in% check_lh$Species]
aw_2021$species
aw_2021$`uri/guid`[aw_2021$aw_species %in% check_lh$Species]
aw_2021$aw_species
check_lh$Species
aw_2021<-aw_2021 %>%
mutate(aw_species=paste0(genus," ",species))
aw_2021$`uri/guid`[aw_2021$aw_species %in% check_lh$Species]
check_lh <- lh2 %>%
filter(is.na(References), is.na(url_aw), is.na(url_iucn))
aw_2021[aw_2021$aw_species %in% check_lh$Species,]
aw_2021 %>%
filter(aw_species %in% check_lh$Species)
aw_2021 %>%
filter(aw_species %in% check_lh$Species) %>%
select(aw_species, `uri/guid`)
extras<-aw_2021 %>%
filter(aw_species %in% check_lh$Species) %>%
select(aw_species, `uri/guid`)
extras<-aw_2021 %>%
filter(aw_species %in% check_lh$Species) %>%
select(aw_species, `uri/guid`) %>%
rename(aw_species = "Species")
extras<-aw_2021 %>%
filter(aw_species %in% check_lh$Species) %>%
select(aw_species, `uri/guid`) %>%
rename("Species" = aw_species)
extras<-aw_2021 %>%
filter(aw_species %in% check_lh$Species) %>%
select(aw_species, `uri/guid`) %>%
rename("Species" = aw_species,
url_aw = `uri/guid`)
lh2<-lh2 %>%
left_join(extras)
View(lh2)
View(extras)
lh2<-lh2 %>%
left_join(extras, by="Species")
View(lh2)
extras<-aw_2021 %>%
filter(aw_species %in% check_lh$Species) %>%
select(aw_species, `uri/guid`) %>%
rename("Species" = aw_species,
url_extras = `uri/guid`)
lh2<-lh %>%
left_join(mutate(all_urls, Species=str_replace(species_asw_2019, "_", " "))) %>%
select(-species_asw_2019)
check_lh <- lh2 %>%
filter(is.na(References), is.na(url_aw), is.na(url_iucn))
extras<-aw_2021 %>%
filter(aw_species %in% check_lh$Species) %>%
select(aw_species, `uri/guid`) %>%
rename("Species" = aw_species,
url_extras = `uri/guid`)
lh2<-lh2 %>%
left_join(extras, by="Species")
lh2<-lh %>%
left_join(mutate(all_urls, Species=str_replace(species_asw_2019, "_", " "))) %>%
select(-species_asw_2019)
check_lh <- lh2 %>%
filter(is.na(References), is.na(url_aw), is.na(url_iucn))
extras<-aw_2021 %>%
filter(aw_species %in% check_lh$Species) %>%
select(aw_species, `uri/guid`) %>%
rename("Species" = aw_species,
url_extras = `uri/guid`)
lh3<-lh2 %>%
left_join(extras, by="Species") %>%
mutate(aw_url=coalesce(aw_url, url_extras))
lh3<-lh2 %>%
left_join(extras, by="Species") %>%
mutate(aw_url=coalesce(url_aw, url_extras))
View(lh3)
lh3<-lh2 %>%
left_join(extras, by="Species") %>%
mutate(url_aw=coalesce(url_aw, url_extras)) %>%
select(-url_extras)
View(lh3)
check_lh <- lh3 %>%
filter(is.na(References), is.na(url_aw), is.na(url_iucn))
View(check_lh)
View(aw_2021)
View(lh3)
lh<-read_xlsx("~/Dropbox/Ivan-Christoph/Trait MS/REVISIONS/SI/SD1_lh_coding.xlsx", sheet=2)
dictionary<-read_csv("synonyms_2019.csv")
dictionary
dictionary$species_asw_2019[duplicated(dictionary$species_asw_2019)]
dictionary$species_aw_2019[duplicated(dictionary$species_aw_2019)]
dictionary$iucn_2019[duplicated(dictionary$iucn_2019)]
aw<-read_tsv("amphweb_2019.txt")
aw
iucn<-read_csv("~/Documents/central_gis_layers/iucn_ranges/amphibians_aug2019/redlist_species_data/simple_summary.csv")
lh<-read_xlsx("~/Dropbox/Ivan-Christoph/Trait MS/REVISIONS/SI/SD1_lh_coding.xlsx", sheet=2)
### create iucn urls
iucn_url <-iucn %>%
mutate(url_iucn=paste0("https://www.iucnredlist.org/species/", internalTaxonId,"/", assessmentId),
species=str_replace(scientificName, " ","_")) %>%
select(species, url_iucn)
iucn_url
### create Aw urls
aw_url <-aw %>%
mutate(url_aw = `uri/guid`,
species = paste0(genus,"_",species)) %>%
select(species, url_aw)
aw_url
all_urls<-dictionary %>%
left_join(iucn_url, by=c("iucn_2019"="species")) %>%
left_join(aw_url, by=c("species_aw_2019"="species")) %>%
select(species_asw_2019,url_aw, url_iucn)
all_urls
lh2<-lh %>%
left_join(mutate(all_urls, Species=str_replace(species_asw_2019, "_", " "))) %>%
select(-species_asw_2019)
check_lh <- lh2 %>%
filter(is.na(References), is.na(url_aw), is.na(url_iucn))
### add more recent AW links
aw_2021<-read_tsv("amphweb_nov2021.txt")
aw_2021
aw_2021<-aw_2021 %>%
mutate(aw_species=paste0(genus," ",species))
extras<-aw_2021 %>%
filter(aw_species %in% check_lh$Species) %>%
select(aw_species, `uri/guid`) %>%
rename("Species" = aw_species,
url_extras = `uri/guid`)
lh3<-lh2 %>%
left_join(extras, by="Species") %>%
mutate(url_aw=coalesce(url_aw, url_extras)) %>%
select(-url_extras)
check_lh <- lh3 %>%
filter(is.na(References), is.na(url_aw), is.na(url_iucn))
View(check_lh)
# check to see that none are duplicated
all_urls$species_asw_2019[duplicated(all_urls$url_aw) & !is.na(all_urls$url_aw)]
all_urls$species_asw_2019[duplicated(all_urls$url_iucn) & !is.na(all_urls$url_iucn)]
View(lh3)
write_csv("~/Desktop/urls.csv", na="")
write_csv(lh3, "~/Desktop/urls.csv", na="")
setwd("~/Documents/amphibian_diversity_project/2021/corHMM/gymno_roots/")
library(ape)
library(geiger)
library(phytools)
library(corHMM)
library(tidyverse)
library(parallel)
library(MuMIn)
library(qgraph)
##############################################################################################
# load MCC tree and data
phy<-read.tree("gymno.tre")
dat<-read_csv("gymno.csv")
name.check(phy, data.names = dat$species_asw)
dat<-as.data.frame(dat[,c("species_asw","rep_mode1")])
summary(as.factor(dat$rep_mode1))
q<-list()
## ER yang
q$er_yang<-getStateMat4Dat(dat, model="ER")
q$er_yang$model<-"ER"
q$er_yang$rate.cat<-1
q$er_yang$root.p="yang"
q$er_yang
# ER maddfitz
q$er_madd<-getStateMat4Dat(dat, model="ER")
q$er_madd$model<-"ER"
q$er_madd$rate.cat<-1
q$er_madd$root.p="maddfitz"
q$er_madd
# ER equal
q$er_equal<-getStateMat4Dat(dat, model="ER")
q$er_equal$model<-"ER"
q$er_equal$rate.cat<-1
q$er_equal$root.p="NULL"
q$er_equal
## SYM yang
q$sym_yang<-getStateMat4Dat(dat, model="SYM")
q$sym_yang$model<-"SYM"
q$sym_yang$rate.cat<-1
q$sym_yang$root.p="yang"
q$sym_yang
## SYM madd
q$sym_madd<-getStateMat4Dat(dat, model="SYM")
q$sym_madd$model<-"SYM"
q$sym_madd$rate.cat<-1
q$sym_madd$root.p="maddfitz"
q$sym_madd
## SYM equal
q$sym_equal<-getStateMat4Dat(dat, model="SYM")
q$sym_equal$model<-"SYM"
q$sym_equal$rate.cat<-1
q$sym_equal$root.p="NULL"
q$sym_equal
## ARD yang
q$ard_yang<-getStateMat4Dat(dat, model="ARD")
q$ard_yang$model<-"ARD"
q$ard_yang$rate.cat<-1
q$ard_yang$root.p="yang"
q$ard_yang
## ARD maddfitz
q$ard_madd<-getStateMat4Dat(dat, model="ARD")
q$ard_madd$model<-"ARD"
q$ard_madd$rate.cat<-1
q$ard_madd$root.p="maddfitz"
q$ard_madd
## ARD equal
q$ard_equal<-getStateMat4Dat(dat, model="ARD")
q$ard_equal$model<-"ARD"
q$ard_equal$rate.cat<-1
q$ard_equal$root.p="NULL"
q$ard_equal
pdf("corHMM_gymno_roots.pdf")
source("_corHMM_models_gymno_roots.R")
dev.off()
pdf("corHMM_gymno_roots.pdf")
source("_corHMM_models_gymno_roots.R")
dev.off()
q<-lapply(q, FUN=append,
list(phy=phy,
data=dat,
node.states="marginal",
get.tip.states=T,
ip=0.0001,
nstarts = 25,
n.cores = 25))
q2<-q
for(i in 1:length(q2)){
q2[[i]]$legend<-NULL
}
run.corHMM<-function(i) {
tmp<-do.call(corHMM, args=q2[[i]])
if(!dir.exists("corHMM_output")) dir.create("corHMM_output")
saveRDS(tmp,file = paste0("corHMM_output/",i,"_",names(q2)[i], ".rds"))
return(tmp)
}
##############################################################################################
# load MCC tree and data
phy<-read.tree("gymno.tre")
dat<-read_csv("gymno.csv")
name.check(phy, data.names = dat$species_asw)
dat<-as.data.frame(dat[,c("species_asw","rep_mode1")])
summary(as.factor(dat$rep_mode1))
##############################################################################################
# Load transition matrices
pdf("corHMM_gymno_roots.pdf")
source("_corHMM_models_gymno_roots.R")
dev.off()
## append shared arguments to models
q<-lapply(q, FUN=append,
list(phy=phy,
data=dat,
node.states="marginal",
get.tip.states=T,
ip=0.0001,
nstarts = 10,
n.cores = 10))
## remove the 'legend' term to allow do.call to run
q2<-q
for(i in 1:length(q2)){
q2[[i]]$legend<-NULL
}
run.corHMM<-function(i) {
tmp<-do.call(corHMM, args=q2[[i]])
if(!dir.exists("corHMM_output")) dir.create("corHMM_output")
saveRDS(tmp,file = paste0("corHMM_output/",i,"_",names(q2)[i], ".rds"))
return(tmp)
}
corHMM_fit<-list()
corHMM_fit<-mclapply(FUN=run.corHMM,
X=1:length(q2),
mc.cores = 1)
q2
##############################################################################################
# load MCC tree and data
phy<-read.tree("gymno.tre")
dat<-read_csv("gymno.csv")
name.check(phy, data.names = dat$species_asw)
dat<-as.data.frame(dat[,c("species_asw","rep_mode1")])
summary(as.factor(dat$rep_mode1))
##############################################################################################
# Load transition matrices
pdf("corHMM_gymno_roots.pdf")
source("_corHMM_models_gymno_roots.R")
dev.off()
##############################################################################################
## code unknowns as uncertain
dat$rep_mode1[is.na(dat$rep_mode1)]<-"D&S&V"
summary(as.factor(dat$rep_mode1))
## append shared arguments to models
q<-lapply(q, FUN=append,
list(phy=phy,
data=dat,
node.states="marginal",
get.tip.states=T,
nstarts = 10,
n.cores = 10))
## remove the 'legend' term to allow do.call to run
q2<-q
for(i in 1:length(q2)){
q2[[i]]$legend<-NULL
}
run.corHMM<-function(i) {
tmp<-do.call(corHMM, args=q2[[i]])
if(!dir.exists("corHMM_output")) dir.create("corHMM_output")
saveRDS(tmp,file = paste0("corHMM_output/",i,"_",names(q2)[i], ".rds"))
return(tmp)
}
corHMM_fit<-list()
corHMM_fit<-mclapply(FUN=run.corHMM,
X=1:length(q2),
mc.cores = 1)
run,corHMM(i=1)
run.corHMM(i=1)
phy
nrow(dat)
dat$rep_mode1
run.corHMM(i=2)
corHMM
q$er_yang
q2$er_yang
setwd("~/Documents/amphibian_diversity_project/2021/corHMM/gymno/")
##############################################################################################
# load MCC tree and data
phy<-read.tree("gymno.tre")
dat<-read_csv("gymno.csv")
name.check(phy, data.names = dat$species_asw)
dat<-as.data.frame(dat[,c("species_asw","rep_mode1")])
summary(as.factor(dat$rep_mode1))
pdf("corHMM_gymno_q.pdf")
source("_corHMM_models_gymno.R")
dev.off()
dat$rep_mode1[is.na(dat$rep_mode1)]<-"D&S&V"
summary(as.factor(dat$rep_mode1))
q<-lapply(q, FUN=append,
list(phy=phy,
data=dat,
node.states="none",
get.tip.states=F,
nstarts = 25,
n.cores = 25))
q2<-q
for(i in 1:length(q2)){
q2[[i]]$legend<-NULL
}
### force roots to be fixed as Aquatic
sapply(X=q2, `[[`, "root.p")
sapply(X=q2, `[[`, "node.states")
sapply(X=q2, `[[`, "get.tip.states")
for(i in 1:length(q2)){
q2[[i]]$root.p<-c(0,1,0)
}
### reconstruct ancestral states for ARD models
q2$ard$node.states<-"marginal"
q2$ard$get.tip.states<-T
q2$HMM_ard$node.states<-"marginal"
q2$HMM_ard$get.tip.states<-T
q2<-q2[!grepl(names(q), pattern="HMM\\d+_")]
run.corHMM<-function(i) {
tmp<-do.call(corHMM, args=q2[[i]])
if(!dir.exists("corHMM_output")) dir.create("corHMM_output")
saveRDS(tmp,file = paste0("corHMM_output/",i,"_",names(q2)[i], ".rds"))
return(tmp)
}
run.corHMM<-function(i) {
tmp<-do.call(corHMM, args=q2[[i]])
if(!dir.exists("corHMM_output2")) dir.create("corHMM_output2")
saveRDS(tmp,file = paste0("corHMM_output2/",i,"_",names(q2)[i], ".rds"))
return(tmp)
}
run.corHMM(i = 15)
class(dat$rep_mode1)
dat$rep_mode1<-as.factor(dat$rep_mode1)
q<-lapply(q, FUN=append,
list(phy=phy,
data=dat,
node.states="none",
get.tip.states=F,
nstarts = 25,
n.cores = 25))
##############################################################################################
# load MCC tree and data
phy<-read.tree("gymno.tre")
dat<-read_csv("gymno.csv")
name.check(phy, data.names = dat$species_asw)
dat<-as.data.frame(dat[,c("species_asw","rep_mode1")])
summary(as.factor(dat$rep_mode1))
##############################################################################################
# Load transition matrices
pdf("corHMM_gymno_q.pdf")
source("_corHMM_models_gymno.R")
dev.off()
##############################################################################################
## code unknowns as uncertain
dat$rep_mode1[is.na(dat$rep_mode1)]<-"D&S&V"
summary(as.factor(dat$rep_mode1))
dat$rep_mode1<-as.factor(dat$rep_mode1)
q<-lapply(q, FUN=append,
list(phy=phy,
data=dat,
node.states="none",
get.tip.states=F,
nstarts = 25,
n.cores = 25))
q2<-q
for(i in 1:length(q2)){
q2[[i]]$legend<-NULL
}
### force roots to be fixed as Aquatic
sapply(X=q2, `[[`, "root.p")
sapply(X=q2, `[[`, "node.states")
sapply(X=q2, `[[`, "get.tip.states")
for(i in 1:length(q2)){
q2[[i]]$root.p<-c(0,1,0)
}
### reconstruct ancestral states for ARD models
q2$ard$node.states<-"marginal"
q2$ard$get.tip.states<-T
q2$HMM_ard$node.states<-"marginal"
q2$HMM_ard$get.tip.states<-T
q2<-q2[!grepl(names(q), pattern="HMM\\d+_")]
run.corHMM<-function(i) {
tmp<-do.call(corHMM, args=q2[[i]])
if(!dir.exists("corHMM_output2")) dir.create("corHMM_output2")
saveRDS(tmp,file = paste0("corHMM_output2/",i,"_",names(q2)[i], ".rds"))
return(tmp)
}
run.corHMM(i = 15)
nrow(q2$er$data)
phy$tip.label
run.corHMM(i = 14)
corHMM
