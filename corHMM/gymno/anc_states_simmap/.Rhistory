root.type=muhisse.fit[[id]]$root.type,
root.p=muhisse.fit[[i]]$root.p,
n.cores = 10)
print(paste0("...done with reconstruction ", i, " of " ,length(rec.ids)))
}
warnings()
names(margin.rec)<-as.character(model.performance$model_name)[match(rec.ids, model.performance$model)]
## plot net div rates with diversitree plot function
for(i in 1:length(margin.rec)){
plot.muhisse.states(margin.rec[[i]], rate.param="net.div", show.tip.label=FALSE)
legend("topright", bty="n", legend = names(margin.rec)[[i]])
}
# load starting value tries and select best try per model
file.names<-list.files("./starting_tries/")
file.path<-paste0("./starting_tries/", file.names)
all.fits<-list()
for(i in 1:length(file.names)){
load(file.path[i])
all.fits[[i]]<-tmp
}
starting.tries<-data.frame(file.no=1:length(all.fits),
name=gsub(file.names, pattern="_iter.*", replacement = ""),
aic=unlist(lapply(all.fits, `[[`,"AIC")),
loglik=unlist(lapply(all.fits, `[[`,"loglik")))
# pull out best performing try for each model
max.loglik<-starting.tries %>%
group_by(name) %>%
slice(which.max(loglik)) %>%
arrange(match(name,as.character(models.meta$model.name)))
max.loglik
muhisse.fit<-all.fits[max.loglik$file.no]
model.performance<-data.frame(model=1:length(models),
model_type=models.meta$model.type,
model_name=models.meta$model.name,
lnL=sapply(muhisse.fit, '[[', 1),
AIC=sapply(muhisse.fit, '[[', 2),
AICc=sapply(muhisse.fit, '[[', 3))
model.performance$dAIC<-model.performance$AIC-min(model.performance$AIC)
model.performance$AW<-exp(-0.5*model.performance$dAIC)/sum(exp(-0.5*model.performance$dAIC))
(model.performance<-model.performance[order(model.performance$dAIC),])
best.models<-model.performance$model[!duplicated(model.performance$model_type)]
top.models<-model.performance$model[model.performance$AW>0.01]
rec.ids<-sort(unique(c(top.models, best.models)))
rec.ids
margin.rec<-list()
margin.rec<-list()
for(i in 1:length(rec.ids)){
id<-rec.ids[i]
n.hidden<-nrow(muhisse.fit[[id]]$trans.matrix)/4
margin.rec[[i]]<-MarginReconMuHiSSE(phy=muhisse.fit[[id]]$phy,
data=muhisse.fit[[id]]$data,
f=muhisse.fit[[id]]$f,
hidden.states = n.hidden,
par=muhisse.fit[[id]]$solution,
AIC=muhisse.fit[[id]]$AIC,
root.type=muhisse.fit[[id]]$root.type,
root.p=muhisse.fit[[i]]$root.p,
n.cores = 4)
print(paste0("...done with reconstruction ", i, " of " ,length(rec.ids)))
}
setwd("~/Documents/amphibian_diversity_project/2021/muhisse_2022/gymno/")
load("muhisse_gymno.RData)
load("muhisse_gymno.RData")
plot.dat
names(margin.rec)
library(gghisse)
library(gridExtra)
library(tidyverse)
plot.dat<-list()
for(i in 1:length(margin.rec)){
plot.dat[[i]]<-m_process_recon(margin.rec[[i]])
}
names(plot.dat)<-names(margin.rec)
names(plot.dat)
mod<-muhisse.fit[[model.performance$model[model.performance$model_type=="LhD"][2]]]
mod
## get model parameters
muhisse.param<-m_collect_rates(model_fit=mod,
hidden_traits=mod$hidden.states,
character_states=c("nLnA","LnA","nLA","LA"))
muhisse.param
models.to.average<-as.character(model.performance$model_name) [match(model.performance$model,x=top.models)]
plot.dat$top.avg<-m_process_recon(margin.rec[models.to.average])
model.performance$model_name[1]
dat<-plot.dat$CD$tip_rates
write_csv(dat, "~/Desktop/anura.csv")
### set working directory and load libraries
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/corHMM/anura/anc_states_joint/")
load("anura_anc_joint.RData")
tr_rates[match(states, state_codes), match(states, state_codes)]
best_tr
write_csv(best_tr,"joint_counts.csv")
write_csv(best_tr %>% as_tibble(),"joint_counts.csv")
write_csv(best_tr %>% as_tibble(),"~/Desktop/joint_counts.csv")
write_csv(best_tr %>% as_tibble(rownames = "state"),"~/Desktop/joint_counts.csv")
best_fit$solution[6:10,6:10],4)
best_fit$solution[6:10,6:10]
best_fit$solution
write_csv(best_fit$solution %>% as_tibble(rownames = "state"),"~/Desktop/corhmm_rates.csv")
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/corHMM/anura/anc_states_simmap/")
load("")
load("anc_states_simmap.rds")
# load saved run
best_fit_sim<-readRDS("anc_states_sim.rds")
best_fit_simmap<-readRDS("anc_states_simmap.rds")
## load saved run
best_fit_merged_simmap<-readRDS("anc_states_merged_simmap.rds")
library(ape)
library(geiger)
library(phytools)
library(corHMM)
library(tidyverse)
library(qgraph)
library(phytools)
rep.cols1<-c("A"="#24b9e9",
"S"="#009E73",
"T"="#BF9C00",
"D"="#55FF7E",
"V"="#f6776f",
"P"="gold",
"none"="#ebebeb")
rep.cols1
states<-c("A","D","S","T","V")
names(states)<-as.character(1:5)
## extract node states with highest probability
node_states_max<-states[as.character(apply(X = best_fit_merged_simmap$ace, M=1, FUN = which.max))]
# define tip states
tip_states<-best_fit$data$rep_mode1
##############################################################################################
# load corHMM results from previous script [_run_corHMM_anura.R]
corHMM_fit<-readRDS("../corHMM_fit_anura.rds")
fit_sum<-read_csv("../anura_fit_summary.csv")
head(fit_sum)
#############################################################################################
#### defined the best fitting model (based on AIC) and extract model results
best_fit<-fit_sum[min(fit_sum$AIC)==fit_sum$AIC,]$models
best_fit
best_fit<-corHMM_fit[[best_fit]]
e painted map for final tree
tr_tbl<-function(x) {
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n) %>%
filter(n>0) %>%
mutate(from=states[from],
to = states[to])
return(tr)
}
(best_tr<-tr_tbl(x=best_fit_merged_simmap$count) )
## load saved run
best_fit_merged_simmap<-readRDS("anc_states_merged_simmap.rds")
View(tr_tbl)
(best_tr<-tr_tbl(x=best_fit_merged_simmap$count) )
best_fit_merged_simmap$count)
best_fit_merged_simmap$count
best_fit_merged_simmap$count%>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean)
best_tr
best_tr %>%
pivot_wider(-from)
best_tr %>%
pivot_wider(values_from = n, names_from = to)
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(from)
best_tr$from
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(unique(best_tr$from))
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(from,unique(best_tr$from))
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(from,unique(best_tr$from)) %>%
write_csv("~/Desktop/_scm.csv")
View(best_tr)
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select("A", "D","S","T","")
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(from, A, D,S,T,V)
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(from, A, D,S,T,V) %>%
write_csv("~/Desktop/_scm.csv")
##############################################################################################
##############################################################################################
##############################################################################################
### corHMM: ancestral states [joint estimates]
# This script was used to reconstruct ancestral states using joint estimates, for the Caudata
# dataset of Liedtke et al. 2022.
##############################################################################################
##############################################################################################
##############################################################################################
### set working directory and load libraries
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/corHMM/caudata/anc_states_joint/")
library(ape)
library(geiger)
library(phytools)
library(corHMM)
library(tidyverse)
library(qgraph)
### load custom functions
source("../../aux_scripts/find_transitions.R")
##############################################################################################
# load corHMM results from previous script [_run_corHMM_caudata.R]
corHMM_fit<-readRDS("../corHMM_fit_caudata.rds")
fit_sum<-read_csv("../caudata_fit_summary.csv")
head(fit_sum)
#############################################################################################
#### defined the best fitting model (based on AIC) and extract model results
best_fit<-fit_sum[min(fit_sum$AIC)==fit_sum$AIC,]$models
best_fit
best_fit<-corHMM_fit[[best_fit]]
#############################################################################################
#### function for preparing parameters in the right order for ancRECON
#- index: index matrix
#- q: parameter matrix
p<-function(index, q) {
sapply(1:max(index, na.rm = TRUE),
function(x) na.omit(c(q))[na.omit(c(index) == x)][1])
}
##############################################################################################
# reconstruct ancestral states
## extract parameters needed:
best_fit_params <- p(index=best_fit$index.mat, q=best_fit$solution)
best_fit_params
# reconstruct
best_fit_anc<-ancRECON(phy = best_fit$phy,
data = best_fit$data,
p = best_fit_params,
method = "joint",
get.tip.states = TRUE,
rate.cat = best_fit$rate.cat,
rate.mat = best_fit$index.mat,
root.p = best_fit$root.p)
## add states to corHMM object
best_fit$states<-best_fit_anc$lik.anc.states
###### save RData
save.image("caudata_anc_joint.RData")
######
##############################################################################################
# painted phylogeny with ancestral states
### define tip states coding
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
## make look-up for node state coding
states.codes<-c("A","D","P","S","V")
names(states.codes)<-as.character(1:5)
states.codes
# translate numeric code to our lettering
node_states_best<-states.codes[as.character(best_fit$states)]
# paint tree
phy_painted_best<-find_transitions(phy=best_fit$phy,
tip_states = tip_states,
node_states = node_states_best,
simmap = T,
stem_prop = 1)
##############################################################################################
# Plot tree
### define colour scheme
rep.cols1<-c("A"="#24b9e9",
"S"="#009E73",
"T"="#BF9C00",
"D"="#55FF7E",
"V"="#f6776f",
"P"="gold",
"none"="#ebebeb")
rep.cols1
# plot
pdf("caudata_tree_anc_joint.pdf", paper="a4", width=8, height=11)
par(mfrow=c(1,1))
par(mar=c(1,1,1,1))
plotSimmap(phy_painted_best, fsize=0.1, lw=1, colors = rep.cols1)
nodelabels(pch=19, col=rep.cols1[c("A","D","P","S","V")[best_fit$states]], cex=0.5)
tiplabels(pch=15, col=rep.cols1[tip_states], cex=0.2, adj = 1.2)
legend("bottomleft", bty="n", pch=19, col=rep.cols1[unique(tip_states)],
legend=unique(tip_states),
title="Life-history modes")
dev.off()
##############################################################################################
# Plot the number of transitions and the transition rates
### count the number of transitions mapped on the tree:
(best_tr<-countSimmap(phy_painted_best)$Tr)
# make plotting function
#### see full list of graphic arguments here: https://cran.r-project.org/web/packages/qgraph/qgraph.pdf
tr_plots<-function(tr_counts, states=c("A","S","D","P","V"), title) {
qgraph(title=title,
tr_counts[states,states],
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=T,
edge.label.cex=2,
#minimum=0.001, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
}
# plotting function for transition rates
rate_plots<-function(tr_rates,states=c("A","S","D","P","V"), state_codes, title) {
ordered_rates<-tr_rates[match(states, state_codes), match(states, state_codes)]
qgraph(title=title,
ordered_rates,
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
label.color=rep.cols1[states],
# edges:
edge.labels=ordered_rates,
edge.label.cex=2,
#minimum=0.001, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
}
## plot both
pdf("caudata_transitions_joint.pdf",width=11, height=8)
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
tr_plots(best_tr, title="Number of transitions")
rate_plots(round(best_fit$solution,4), state_codes=states.codes, title="Transition rates")
dev.off()
### save
save.image("caudata_anc_joint.RData")
write_csv(best_tr %>% as_tibble(rownames = "state"),"~/Desktop/_joint_counts.csv")
write_csv(best_fit$solution %>% as_tibble(rownames = "state"),"~/Desktop/_corhmm_rates.csv")
write_csv(best_fit$solution %>% as_tibble(rownames = "state"),"~/Desktop/_corhmm_rates.csv")
# This script was used to reconstruct ancestral states using stochasitc character mapping, for the Caudata
# dataset of Liedtke et al. 2022.
##############################################################################################
##############################################################################################
##############################################################################################
### set working directory and load libraries
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/corHMM/caudata/anc_states_simmap/")
library(ape)
library(geiger)
library(phytools)
library(corHMM)
library(tidyverse)
library(qgraph)
library(phytools)
### load custom functions
source("../../aux_scripts/find_transitions.R")
##############################################################################################
# load corHMM results from previous script [_run_corHMM_caudata.R]
corHMM_fit<-readRDS("../corHMM_fit_caudata.rds")
fit_sum<-read_csv("../caudata_fit_summary.csv")
head(fit_sum)
#############################################################################################
#### defined the best fitting model (based on AIC) and extract model results
best_fit<-fit_sum[min(fit_sum$AIC)==fit_sum$AIC,]$models
best_fit
best_fit<-corHMM_fit[[best_fit]]
best_fit_simmap<-readRDS("anc_states_simmap.rds")
e colour scheme
tr_tbl<-function(x) {
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n) %>%
filter(n>0) %>%
mutate(from=states[from],
to = states[to])
return(tr)
}
(best_tr<-tr_tbl(x=best_fit_simmap$count) )
rep.cols1<-c("A"="#24b9e9",
"S"="#009E73",
"T"="#BF9C00",
"D"="#55FF7E",
"V"="#f6776f",
"P"="gold",
"none"="#ebebeb")
rep.cols1
### make painted map for final tree
# define states
states<-c("A","D","P","S","V")
names(states)<-as.character(1:5)
## extract node states with highest probability
node_states_max<-states[as.character(apply(X = best_fit_simmap$ace, M=1, FUN = which.max))]
# define tip states
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
tr_tbl<-function(x) {
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n) %>%
filter(n>0) %>%
mutate(from=states[from],
to = states[to])
return(tr)
}
(best_tr<-tr_tbl(x=best_fit_simmap$count) )
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(from, A, S,P,D,V)
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(from, A, D,S,P,V) %>%
write_csv("~/Desktop/_scm.csv")
### reconstruct ancestral states for selected models
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/corHMM/gymno/anc_states_joint/")
load("gymno_anc_joint.RData")
write_csv(best_tr %>% as_tibble(rownames = "state"),"~/Desktop/_joint_counts.csv")
write_csv(best_fit$solution %>% as_tibble(rownames = "state"),"~/Desktop/_corhmm_rates.csv")
best_tr
write_csv(best_tr %>% as_tibble(rownames = "state"),"~/Desktop/_joint_counts.csv")
write_csv(best_fit$solution %>% as_tibble(rownames = "state"),"~/Desktop/_corhmm_rates.csv")
# This script was used to reconstruct ancestral states using stochasitc character mapping, for the Gymnophiona
# dataset of Liedtke et al. 2022.
##############################################################################################
##############################################################################################
##############################################################################################
### set working directory and load libraries
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/corHMM/gymno/anc_states_simmap/")
library(ape)
library(geiger)
library(phytools)
library(corHMM)
library(tidyverse)
library(qgraph)
library(phytools)
### load custom functions
source("../../aux_scripts/find_transitions.R")
##############################################################################################
# load corHMM results from previous script [_run_corHMM_gymno.R]
corHMM_fit<-readRDS("../corHMM_fit_gymno.rds")
fit_sum<-read_csv("../gymno_fit_summary.csv")
head(fit_sum)
#############################################################################################
#### defined the best fitting model (based on AIC) and extract model results
best_fit<-fit_sum[min(fit_sum$AIC)==fit_sum$AIC,]$models
best_fit
best_fit<-corHMM_fit[[best_fit]]
#############################################################################################
best_fit_simmap<-readRDS("anc_states_simmap.rds")
##############################################################################################
##### plot
##############################################################################################
### define colour scheme
rep.cols1<-c("S"="#009E73",
"D"="#55FF7E",
"V"="#f6776f",
"none"="#ebebeb")
rep.cols1
### make painted map for final tree
states<-c("D","S","V")
names(states)<-as.character(1:3)
node_states_max<-states[as.character(apply(X = best_fit_simmap$ace, M=1, FUN = which.max))]
tip_states<-best_fit$data$rep_mode1
tip_states[grepl(tip_states, pattern="\\&")]<-NA # set all unknowns to NA
tr_tbl<-function(x) {
tr<-x %>%
as.data.frame() %>%
select(-N) %>%
summarise_all(mean) %>%
pivot_longer(everything(), names_to="trans", values_to="n") %>%
mutate(from=str_remove(trans, ",\\w+"),
to=str_remove(trans, "\\w+,")) %>%
select(from, to, n) %>%
filter(n>0) %>%
mutate(from=states[from],
to = states[to])
return(tr)
}
(best_tr<-tr_tbl(x=best_fit_simmap$count) )
best_tr %>%
pivot_wider(values_from = n, names_from = to)
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(from, D, S V) %>%
best_tr %>%
pivot_wider(values_from = n, names_from = to) %>%
select(from, D, S, V) %>%
write_csv("~/Desktop/_scm.csv")
