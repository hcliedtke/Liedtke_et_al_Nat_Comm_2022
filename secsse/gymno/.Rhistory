(model.performance<-model.performance[order(model.performance$dAIC),])
write.table(model.performance, "muhisse_fit_anura.txt", quote=F, sep="\t", row.names = F)
best.models<-model.performance$model[!duplicated(model.performance$model_type)]
top.models<-model.performance$model[model.performance$AW>0.01]
rec.ids<-sort(unique(c(top.models, best.models)))
rec.ids
load("muhisse_anura.RData")
for(i in 1:length(margin.rec)){
plot.muhisse.states(margin.rec[[i]], rate.param="net.div", show.tip.label=FALSE)
legend("topright", bty="n", legend = names(margin.rec)[[i]])
}
load("muhisse_biphasic_anura.RData")
for(i in 1:length(margin.rec)){
plot.muhisse.states(margin.rec[[i]], rate.param="net.div", show.tip.label=FALSE)
legend("topright", bty="n", legend = names(margin.rec)[[i]])
}
library(gghisse)
library(gridExtra)
library(tidyverse)
names(all.fit)
all.fit
best.mod.stats
dat
map.rates
margin.rec
names(margin.rec)
best.models
rec.ids
View(model.performance)
model.performance$model[model.performance$AW>0.01]
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/muhisse/anura/")
pdf("muhisse_anura.pdf", paper="a4")
################################################################################
## LOAD DATA AND MODELS
################################################################################
phy<-read.tree("./anura.tre")
dat.all<-read.csv("./anura.csv", row.names = 1) ## all data
dat<-dat.all[phy$tip.label,]
name.check(phy, dat) ## should be OK
source("../aux_scripts/muhisse_functions.R")
source("../aux_scripts/muhisse_models_2022.R")
################################################################################
## MAKE MUHISSE DATASET
################################################################################
states<-data.frame(sp=rownames(dat), larva=dat$SSE_larva, adult=dat$SSE_adult)
head(states)
table(states$larva, useNA = "ifany")
table(states$adult, useNA = "ifany")
any(is.na(states)) ## warning!! should not contain NA's
table(states[,c("larva","adult")])
## do a final plot to check things look right
plot(phy, show.tip.label=F)
tiplabels(pch=15,col=ifelse(states$larva==1, "mediumvioletred","gold"), cex=0.5)
tiplabels(pch=15,col=ifelse(states$adult==1, "mediumvioletred","gold"), cex=0.5, adj = 3)
# calculate sampling fraction
f<-c("00"=length(which(dat$SSE_larva==0 & dat$SSE_adult==0))/length(which(dat.all$SSE_larva==0 & dat.all$SSE_adult==0)),
"01"=length(which(dat$SSE_larva==0 & dat$SSE_adult==1))/length(which(dat.all$SSE_larva==0 & dat.all$SSE_adult==1)),
"10"=length(which(dat$SSE_larva==1 & dat$SSE_adult==0))/length(which(dat.all$SSE_larva==1 & dat.all$SSE_adult==0)),
"11"=length(which(dat$SSE_larva==1 & dat$SSE_adult==1))/length(which(dat.all$SSE_larva==1 & dat.all$SSE_adult==1))
)
f
f[is.na(f)]<-1 # update any NAs for states that don't exist (e.g. aquatic eggs and terrestrial larvae)
f
################################################################################
## append run-specific arguments to models
################################################################################
models<-lapply(models, FUN=append,
list(f=f,
phy=phy,
data=states,
root.type="madfitz",
root.p=NULL))
### set all 00 and all 10 states in the rate vectors and transition matrix to 0
for(i in 1:length(models)){
models[[i]]$trans.rate<-trans.correct(models[[i]]$trans.rate, index=1)
models[[i]]$turnover<-drop.rate(models[[i]]$turnover, index=1)
models[[i]]$eps<-drop.rate(models[[i]]$eps, index=1)
}
for(i in 1:length(models)){
models[[i]]$trans.rate<-trans.correct(models[[i]]$trans.rate, index=3)
models[[i]]$turnover<-drop.rate(models[[i]]$turnover, index=3)
models[[i]]$eps<-drop.rate(models[[i]]$eps, index=3)
}
### set correct root state
for(i in 1:length(models)){
models[[i]]$root.p<-set_root(n.hidden = (length(models[[i]]$turnover)/4), root = 4 )
}
## add names to models for StartingValueTry function
for(i in 1:length(models)){
models[[i]]$name<-as.character(models.meta$model.name)[i]
}
################################################################################
# PARALLELIZE AND RUN
################################################################################
## set number of cores to use (max 20) and a seed for mclapply
#ncores=ifelse(length(models)>20, 20, length(models))
ncores=3 # remember that each StartingValueTry will take 25 cores
set.seed(12345)
## set up function to run either MuHiSSE with one set of starting values (for models with no hidden state; MuSSE) or trying 20 different starting values (for models with starting values).
run.muhisse<-function(i) do.call(StartingValueTry, args=models[[i]])
## run...
file.names<-list.files("./starting_tries/")
file.path<-paste0("./starting_tries/", file.names)
all.fit<-list()
for(i in 1:length(file.names)){
load(file.path[i])
all.fit[[i]]<-tmp
}
starting.tries<-data.frame(file.no=1:length(all.fit),
name=gsub(file.names, pattern="_iter.*", replacement = ""),
aic=unlist(lapply(all.fit, `[[`,"AIC")),
loglik=unlist(lapply(all.fit, `[[`,"loglik")))
# pull out best scoring models
max.loglik<-starting.tries %>%
group_by(name) %>%
slice(which.max(loglik)) %>%
arrange(match(name,as.character(models.meta$model.name)))
max.loglik
muhisse.fit<-all.fit[max.loglik$file.no]
model.performance<-data.frame(model=1:length(models),
model_type=models.meta$model.type,
model_name=models.meta$model.name,
lnL=sapply(muhisse.fit, '[[', 1),
AIC=sapply(muhisse.fit, '[[', 2),
AICc=sapply(muhisse.fit, '[[', 3))
model.performance$dAIC<-model.performance$AIC-min(model.performance$AIC)
model.performance$AW<-exp(-0.5*model.performance$dAIC)/sum(exp(-0.5*model.performance$dAIC))
(model.performance<-model.performance[order(model.performance$dAIC),])
best.models<-model.performance$model[!duplicated(model.performance$model_type)]
top.models<-model.performance$model[model.performance$AW>0.01]
rec.ids<-sort(unique(c(top.models, best.models)))
rec.ids
names(margin.rec)<-c("CD","LhD_4","LhID_4")
as.character(model.performance$model_name)[match(rec.ids, model.performance$model)]
names(margin.rec)<-as.character(model.performance$model_name)[match(rec.ids, model.performance$model)]
for(i in 1:length(margin.rec)){
plot.muhisse.states(margin.rec[[i]], rate.param="net.div", show.tip.label=FALSE)
legend("topright", bty="n", legend = names(margin.rec)[[i]])
}
dev.off()
pdf("muhisse_anura.pdf", paper="a4")
## do a final plot to check things look right
plot(phy, show.tip.label=F)
tiplabels(pch=15,col=ifelse(states$larva==1, "mediumvioletred","gold"), cex=0.5)
tiplabels(pch=15,col=ifelse(states$adult==1, "mediumvioletred","gold"), cex=0.5, adj = 3)
for(i in 1:length(margin.rec)){
plot.muhisse.states(margin.rec[[i]], rate.param="net.div", show.tip.label=FALSE)
legend("topright", bty="n", legend = names(margin.rec)[[i]])
}
names(margin.rec)
names(plot.dat)
plot.dat[["top.avg"]]
plot.dat["top.avg"]
str(plot.dat)
plot.dat$top.avg<-NULL
names(plot.dat)
names(plot.dat)<-names(margin.rec)
mod<-muhisse.fit[[model.performance$model[1]]]
muhisse.param
## get model parameters
muhisse.param<-m_collect_rates(model_fit=mod,
hidden_traits=mod$hidden.states,
character_states=c("nLnA","LnA","nLA","LA"))
muhisse.param
mod
models.to.average<-as.character(model.performance$model_name) [match(model.performance$model,x=top.models)]
plot.dat$top.avg<-m_process_recon(margin.rec[models.to.average])
plot.dat
for(i in 1:length(plot.dat)){
params=c("net.div","speciation","extinction")
s<-list()
r<-list()
for(j in params){
s[[j]]<-m_scatterplot(plot.dat[[i]],
parameter = j,
states_names = c("impossibility","Direct", "Paedomorphic","Biphasic"),
colors = c("#2D2E83","#951B81"))
r[[j]]<-m_ridgelines(plot.dat[[i]],
parameter = j,
states_names = c("impossibility","Direct", "Paedomorphic","Biphasic"),
line_colors = c("#2D2E83","#951B81"),
fill_colors = c(NA,NA))
}
grid.arrange(nrow = 2, ncol=3, grobs=c(s,r), top=names(plot.dat)[i])
map.traits<-m_trait_recon(plot.dat[[i]],
show_tip_labels = FALSE,
states_of_first_character = c("no larva", "larva"),
states_of_second_character = c("no adult","adult"),
colors=c("gray","#2D2E83", "gold","#951B81"),
cutoff = 0.5,
tree_layout = "circular",
tree_direction = "right",
time_axis_ticks = 4,
open_angle = 10) +
theme(legend.position="bottom")
map.rates<-m_rate_recon(plot.dat[[i]],
show_tip_labels = FALSE,
parameter = "net.div",
discrete = FALSE,
breaks = seq(0, 1, 0.2),
colors = c("mediumvioletred","gold"),
plot_as_waiting_time = FALSE,
tree_layout = "circular",
tree_direction = "right",
time_axis_ticks = 4,
open_angle = 10) +
theme(legend.position="bottom")
grid.arrange(nrow = 1, ncol=2, map.traits,map.rates, top=names(plot.dat)[i])
}
names(plot.dat)
plot.dat$LhID_4$tip_rates %>%
select(-id) %>%
mutate(state=factor(max.col(select(.,contains("state"))), labels = c("direct","biphasic"))) %>%
group_by(state) %>%
summarise_all(c(mean,sd)) %>%
print(width=400)
best.mod.stats<-plot.dat$LhID_4$tip_rates %>%
select(-id) %>%
mutate(state=factor(max.col(select(.,contains("state"))), labels = c("direct","biphasic"))) %>%
group_by(state) %>%
summarise_all(c(mean,sd)) %>%
print(width=400)
write.csv(best.mod.stats, "best_mod_tiprates_anura.csv")
par(mfrow=c(1,4))
par(mar=c(4,1,4,1))
rep.cols=c("00"="grey", "10"="gold", "01"="#2D2E83", "11"="#951B81")
plot(phy, show.tip.label = F, main="LhD tip rates")
plot(x=plot.dat$LhD_4$tip_rates$net.div, y=1:Ntip(phy),
pch=16,
col=rep.cols[apply(MARGIN = 1, X=states[,2:3], paste0, collapse="")],
bty="n",
xlab = "r",ylab=NA, yaxt="n",
main="Net Diversification")
plot(x=plot.dat$LhD_4$tip_rates$turnover, y=1:Ntip(phy),
pch=16,
col=rep.cols[apply(MARGIN = 1, X=states[,2:3], paste0, collapse="")],
bty="n",
xlab = "t",ylab=NA, yaxt="n",
main="turnover")
plot(x=plot.dat$LhD_4$tip_rates$extinct.frac, y=1:Ntip(phy),
pch=16,
col=rep.cols[apply(MARGIN = 1, X=states[,2:3], paste0, collapse="")],
bty="n",
xlab = "e",ylab=NA, yaxt="n",
main="ext.fr")
dev.off()
####
save.image("muhisse_anura.RData")
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/secsse/gymno/")
p_load(ape,secsse,DDD,doMC,tidyverse,parallel,qgraph)
phy_full<-read.tree("gymno.tre")
dat_full<-read_csv("gymno.csv")
View(dat_full)
phy_full<-read.tree("../jetz_4k_asw_08_2019.tre")
phy_full<-read.tree("../../jetz_4k_asw_08_2019.tre")
phy_full<-read.tree("../jetz_4k_asw_08_2019.tre")
dat_full<-read_csv("../rep_modes.csv")
# adjust data
dat_gymno<-dat_full %>%
filter(order=="Gymnophiona") %>%
mutate(secsse_state=case_when(
rep_mode=="S"~1,
rep_mode=="D"~2,
rep_mode=="L"~3))
table(dat_gymno$secsse_state,useNA = "always") ### make sure no states are 99
table(dat_gymno$rep_mode, useNA="always")
# pair tree and data
phy<-drop.tip(phy_full, as.character(dat_full$species_asw[dat_full$order!="Gymnophiona"]))
phy
dat<-dat_gymno %>%
filter(species_asw %in% phy$tip.label) %>%
arrange(match(species_asw, phy$tip.label))
all(dat$species_asw==phy$tip.label)
# make secsse states
states<-pull(dat, secsse_state)
states
table(states,useNA = "always")
# number of observed states
n_states<-length(unique(na.omit(states)))
## sampling fraction
f=table(dat$secsse_state)/table(dat_gymno$secsse_state)
f
## loads auxiliary functions
source("../../aux_scripts/secsse_functions.R")
## loads auxiliary functions
source("../aux_scripts/secsse_functions.R")
# loads the models/hypotheses to be tested
source("../aux_scripts/secsse_base_models.R")
length(models) # should be 4 models plus 4 fixed mu0 models
names(models)
length(models) # should be 4 models plus 4 fixed mu0 models
names(models)
### prepare a mask that can be overlaid the Q matrix to set specific transitions to 0
mask<-matrix(1, nrow=3, ncol=3)
diag(mask)<-NA
mask[1,3]<-0
mask[3,1]<-0
# visualize
#qgraph(mask, directed=TRUE,layout="circular")
# mask and reindex Q matrices
for(i in 1:length(models)){
models[[i]]$idparslist$Q<-mask_q(q=models[[i]]$idparslist$Q, mask=mask, n_states = 3)
}
######################################
### update number of parameters to optimize
for(i in 1:length(models)){
idparsopt = sort(unique(na.omit(unname(unlist(models[[i]]$idparslist)))))
if(any(idparsopt %in% 0)){
idparsopt = idparsopt[idparsopt!=0]
idparsfix = c(0)
parsfix = c(0)
} else {
idparsfix = c()
parsfix = c()
}
## append
models[[i]]<-append(models[[i]],
list(
idparsopt=idparsopt,
idparsfix=idparsfix,
parsfix=parsfix
)
)
}
## try1: optimized
## try2: optimized/2
## try3: optimizes*2
startingpoint <- bd_ML(brts = ape::branching.times(phy))
intGuessLambda <- startingpoint$lambda0
intGuessMu <- startingpoint$mu0
intGuessLambdas<-c(intGuessLambda, intGuessLambda/2, intGuessLambda*2)
intGuessMus <- c(intGuessMu, intGuessMu/2, intGuessMu*2)
initTrans <- intGuessLambdas/n_states
nrep=length(intGuessLambdas)
# replicate models and rename
replicate_models<-rep(models,each=nrep)
names(replicate_models)<-paste0(rep(names(models), each=nrep), rep(paste0("_try", 1:nrep),nrep))
names(replicate_models)
# replace models object
models<-replicate_models
# add starting values
iterator=rep(1:nrep, length(models)/nrep)
for(i in 1:length(models)){
## prep:
initparsopt = c(
rep(intGuessLambdas[iterator[i]],length(unique(models[[i]]$idparslist$lambdas))),
ifelse(unique(models[[i]]$idparslist$mus)!=0,
rep(intGuessMus[iterator[i]],length(unique(models[[i]]$idparslist$mus))),
0
),
rep(initTrans[iterator[i]],length(which(unique(c(models[[i]]$idparslist$Q))>0)))
)
initparsopt<-initparsopt[initparsopt!=0]
## append
models[[i]]$initparsopt<-initparsopt
}
setwd("~/Documents/amphibian_diversity_project/2021/_SI_scripts/secsse/gymno/")
## set global plotting theme
theme_set(theme_bw())
## set coding categories
rep_mode<-c("1"="S",
"2"="D",
"3"="V")
rep_mode
rep.cols1<-c("A"="#24b9e9",
"S"="#009E73",
"T"="#BF9C00",
"D"="#55FF7E",
"V"="#f6776f",
"P"="gold",
"none"="#ebebeb")
rep.cols1
## load secsse output files
files<-list.files(path = "secsse_out", pattern=".*_out.rds")
files
secsse_out<-lapply(paste0("secsse_out/",files), readRDS)
names(secsse_out)<-str_remove_all(files, pattern="_out.rds")
## load secsse models
models<-readRDS("secsse_models_gymno.rds")
names(models)
## check all models match
names(secsse_out) %in% names(models)
names(models) %in% names(secsse_out)
## make sure that all have converged
all(sapply(secsse_out, `[[`, "conv") == 0) # should all be 0 (i.e. TRUE)
## tabulate likelihoods
secsse_fit_itr<-data.frame(model_type=str_remove(names(secsse_out), pattern="_try\\d+$"),
model_itr = as.numeric(replace_na(str_extract(names(secsse_out), pattern="\\d+$"),"0")),
ml = sapply(secsse_out, `[[`, "ML"))
## tally
secsse_fit_itr %>%
group_by(model_type) %>%
tally()
secsse_fit_itr %>%
ggplot(aes(x=model_type, y=ml)) +
geom_boxplot() +
geom_jitter(width=0.1, aes(color=ifelse(model_itr==1,"opt","random"))) +
theme_bw() +
theme(legend.position = "none")
secsse_fit <- secsse_fit_itr %>%
rownames_to_column("model_name") %>%
group_by(model_type) %>%
filter(ml == max(ml)) %>%
distinct(model_type, .keep_all=TRUE)
### functions for manual calculations:
calc_AIC<-function(loglik, np) { -2 * loglik + 2 * np}
calc_AW <- function(dAIC) { exp(-0.5*dAIC)/sum(exp(-0.5*dAIC)) }
secsse_fit$AIC<-NA
for(i in 1:nrow(secsse_fit)) {
secsse_fit$AIC[i]<-calc_AIC(loglik = secsse_fit$ml[[i]],
np = length(models[[secsse_fit$model_name[[i]]]]$idparsopt))
}
secsse_fit$dAIC<-secsse_fit$AIC-min(secsse_fit$AIC)
secsse_fit$Aw<-calc_AW(dAIC = secsse_fit$dAIC)
secsse_fit<-secsse_fit %>%
arrange(desc(Aw))
secsse_fit
mu0_models<- secsse_fit %>%
filter(str_detect(model_name, "mu0")) %>%
arrange(AIC)
mu0_models
full_models<-secsse_fit %>%
filter(!str_detect(model_name, "mu0")) %>%
arrange(AIC)
full_models
mu0_models<- secsse_fit %>%
filter(str_detect(model_name, "mu0")) %>%
arrange(AIC)
mu0_models
full_models<-secsse_fit %>%
filter(!str_detect(model_name, "mu0")) %>%
arrange(AIC)
full_models
# recalculate dAIC and Aw
full_models$dAIC<-full_models$AIC-min(full_models$AIC)
full_models$Aw<-calc_AW(dAIC = full_models$dAIC)
full_models
mu0_models$dAIC<-mu0_models$AIC-min(mu0_models$AIC)
mu0_models$Aw<-calc_AW(dAIC = mu0_models$dAIC)
mu0_models
#### tabulate lambda, mu and div rate for best model
secsse_fit$model_name
best<-secsse_fit$model_name[2]
best
best_model<-secsse_out[[best]]
best_params<-best_model$MLpars[[1]] %>%
enframe(name = "state", value = "lambda") %>%
bind_cols(
best_model$MLpars[[2]] %>%
enframe(name = "state_mu", value = "mu")
) %>% #### BE CAREFUL HERE THAT THE COLUMNS BIND IN THE CORRECT ORDER
select(-state_mu) %>%
mutate(div=lambda-mu) %>%
pivot_longer(-state) %>%
mutate(state=factor(state, levels=unique(state)),
observed=str_extract(state, pattern="\\d+"),
hidden=str_remove(state, pattern="\\d+")) %>% # re-order
mutate(observed = rep_mode[as.character(observed)])
best_params
best_params %>%
ggplot(aes(x=observed, y=value, fill=observed, group=hidden)) +
geom_bar(stat = "identity", position="dodge", color="black") +
scale_fill_manual(values=rep.cols1) +
facet_wrap(~name, scales = "free_y") +
ylab("Rate") +
xlab("") +
theme(legend.position = "none")
# plot as averages across hidden and observed states if applicable
best_params %>%
group_by(name, observed) %>%
summarise(value=mean(value)) %>%
ggplot(aes(x=observed, y=value, fill=observed)) +
geom_bar(stat = "identity", position="dodge") +
scale_fill_manual(values=rep.cols1) +
facet_wrap(~name, scales = "free_y") +
coord_flip() +
theme(legend.position = "none")
best_model$MLpars[[3]]
library(qgraph)
rate_plots<-function(tr_rates,states=c("S","D","V"), state_codes, title) {
qgraph(title=title,
input = tr_rates,
#tr_rates[match(states, state_codes), match(states, state_codes)],
#nodes:
labels=states,
shape="rectangle",
vsize=10,
node.height=0.5,
label.cex=1.25,
#label.color=rep.cols1[states],
# edges:
edge.labels=round(tr_rates,3),
edge.label.cex=2,
#minimum=0.001, # threshold for edges to include
edge.width=1.5,
posCol="black",
fade=T,
colFactor=0.2,
# themes and layout:
#theme="TeamFortress",
layout="circular",
directed=TRUE)
}
n_states<-length(rep_mode)
n_hidden<-nrow(best_model$MLpars[[3]])/n_states
state_codes<-rep(rep_mode,n_hidden)
names(state_codes)<-paste0(1:n_states,rep(LETTERS[1:n_hidden],each=n_states))
state_codes
par(mar=c(1,2,1,1))
par(mfrow=c(1,2))
rate_plots(tr_rates = best_model$MLpars[[3]][1:n_states,1:n_states], state_codes=states_codes, title="Observed")
rate_plots(tr_rates = best_model$MLpars[[3]][(n_states+1):(n_states+n_states),(n_states+1):(n_states+n_states)], state_codes=state_codes, title="Hidden")
