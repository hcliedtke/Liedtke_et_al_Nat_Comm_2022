models[[1]]
models[[2]]
models[[3]]
models[[7]]
######################################
### define model names and types
models.meta<-data.frame(model.number=1:length(models),
model.name=c("CD",
"LhD_1","LhD_2","LhD_3","LhD_4",
"LhID_2","LhID_3","LhID_4"
),
model.type=c("CD", rep("LhD",4), rep("LhID",3)))
models<-list()
#turnover and extinction fraction different for each state, full Q matrix
models[[1]]<-list(hidden.states=FALSE,
turnover=c(1,1,1,1),
eps=c(1,1,1,1),
trans.rate= TransMatMakerMuHiSSE(hidden.traits = 0,include.diagonals = T))
#LhD_1: No hidden states
models[[2]]<-list(hidden.states=FALSE,
turnover=c(1,2,3,4),
eps=c(1,2,3,4),
trans.rate= TransMatMakerMuHiSSE(hidden.traits = 0, include.diagonals = T))
#LhD_2: Observed + 1 hidden state (2 rate categories)
models[[3]]<-list(hidden.states=TRUE,
turnover=c(1:8),
eps=c(1:8),
trans.rate=TransMatMakerMuHiSSE(hidden.traits = 1,include.diagonals = T))
#LhD_3: Observed + 2 hidden state (3 rate categories)
models[[4]]<-list(hidden.states=TRUE,
turnover=c(1:12),
eps=c(1:12),
trans.rate=TransMatMakerMuHiSSE(hidden.traits = 2,include.diagonals = T))
#LhD_4: Observed + 3 hidden state (4 rate categories)
models[[5]]<-list(hidden.states=TRUE,
turnover=c(1:16),
eps=c(1:16),
trans.rate=TransMatMakerMuHiSSE(hidden.traits = 3,include.diagonals = T))
#LhID_2: Observed + 1 hidden state (2 rate categories) [like CID2]
models[[6]]<-list(hidden.states=TRUE,
turnover=rep(1:2, each=4),
eps=rep(1:2, each=4),
trans.rate=TransMatMakerMuHiSSE(hidden.traits = 1, make.null = T, include.diagonals = T))
#LhID_3: Observed + 2 hidden state (3 rate categories) [like CID3]
models[[7]]<-list(hidden.states=TRUE,
turnover=rep(1:3, each = 4),
eps=rep(1:3, each = 4),
trans.rate=TransMatMakerMuHiSSE(hidden.traits = 2, make.null = T, include.diagonals = T))
#LhID_4: Observed + 3 hidden state (4 rate categories) [like CID4]
models[[8]]<-list(hidden.states=TRUE,
turnover=rep(1:4, each = 4),
eps=rep(1:4, each = 4),
trans.rate=TransMatMakerMuHiSSE(hidden.traits = 3, make.null = T, include.diagonals = T))
######################################
### define model names and types
models.meta<-data.frame(model.number=1:length(models),
model.name=c("CD",
"LhD_1","LhD_2","LhD_3","LhD_4",
"LhID_2","LhID_3","LhID_4"
),
model.type=c("CD", rep("LhD",4), rep("LhID",3)))
names(models)<-models.meta$model.name
models
#LhID_2: Observed + 1 hidden state (2 rate categories) [like CID2]
models[[6]]<-list(hidden.states=TRUE,
turnover=rep(1:2, each=4),
eps=rep(1:2, each=4),
trans.rate=TransMatMakerMuHiSSE(hidden.traits = 1, make.null = T, include.diagonals = T, cat.trans.vary = TRUE))
models[[6]]
#LhID_3: Observed + 2 hidden state (3 rate categories) [like CID3]
models[[7]]<-list(hidden.states=TRUE,
turnover=rep(1:3, each = 4),
eps=rep(1:3, each = 4),
trans.rate=TransMatMakerMuHiSSE(hidden.traits = 2, make.null = T, include.diagonals = T, cat.trans.vary = TRUE))
models[[7]]
models[[8]]
# CID2, one hidden trait, transitions three.rate
mat.cid2 <- TransMatMaker(hidden.states=TRUE)
# CID2, one hidden trait, transitions three.rate
mat.cid2 <- TransMatMaker.old(hidden.states=TRUE)
mat.cid2
mat.cid2 <- ParDrop(mat.cid2, c(3,5,8,10))
mat.cid2
mat.cid2[mat.cid2 %in% c(2,4,5,7)] <- 2 # rates for change between rate classes
mat.cid2
mat.cid2[mat.cid2 %in% c(1,6)] <- 1 # rates for 1 -> 0 transition in character are equal
mat.cid2[mat.cid2 %in% c(3,8)] <- 3 # rates for 0 -> 1 transition in character are equal
mat.cid2
setwd("~/Documents/amphibian_diversity_project/2021/muhisse_2022/gymno/")
pdf("muhisse_gymno_models.pdf", paper="a4")
phy<-read.tree("./gymno.tre")
dat.all<-read.csv("./gymno.csv", row.names = 1) ## all data
dat<-dat.all[phy$tip.label,]
name.check(phy, dat) ## should be OK
source("../aux_scripts/muhisse_functions.R")
source("../aux_scripts/muhisse_models.R")
source("../aux_scripts/muhisse_models_2022.R")
states<-data.frame(sp=rownames(dat), larva=dat$SSE_larva, adult=dat$SSE_adult)
head(states)
table(states$larva, useNA = "ifany")
table(states$adult, useNA = "ifany")
any(is.na(states)) ## warning!! should not contain NA's
## do a final plot to check things look right
plot(phy, show.tip.label=F)
phy<-read.tree("./gymno.tre")
dat.all<-read.csv("./gymno.csv", row.names = 1) ## all data
dat<-dat.all[phy$tip.label,]
name.check(phy, dat) ## should be OK
source("../aux_scripts/muhisse_functions.R")
source("../aux_scripts/muhisse_models_2022.R")
states<-data.frame(sp=rownames(dat), larva=dat$SSE_larva, adult=dat$SSE_adult)
head(states)
table(states$larva, useNA = "ifany")
table(states$adult, useNA = "ifany")
any(is.na(states)) ## warning!! should not contain NA's
## do a final plot to check things look right
plot(phy, show.tip.label=F)
tiplabels(pch=15,col=ifelse(states$larva==1, "mediumvioletred","gold"), cex=1)
tiplabels(pch=15,col=ifelse(states$adult==1, "mediumvioletred","gold"), cex=1, adj = 3)
dev.off()
# calculate sampling fraction
f<-c("00"=length(which(dat$SSE_larva==0 & dat$SSE_adult==0))/length(which(dat.all$SSE_larva==0 & dat.all$SSE_adult==0)),
"01"=length(which(dat$SSE_larva==0 & dat$SSE_adult==1))/length(which(dat.all$SSE_larva==0 & dat.all$SSE_adult==1)),
"10"=length(which(dat$SSE_larva==1 & dat$SSE_adult==0))/length(which(dat.all$SSE_larva==1 & dat.all$SSE_adult==0)),
"11"=length(which(dat$SSE_larva==1 & dat$SSE_adult==1))/length(which(dat.all$SSE_larva==1 & dat.all$SSE_adult==1))
)
f
f[is.na(f)]<-1 # update any NAs for states that don't exist (e.g. aquatic eggs and terrestrial larvae)
f
models<-lapply(models, FUN=append,
list(f=f,
phy=phy,
data=states,
root.type=NULL,
root.p=NULL)) ## root.type and root.p will be set later
for(i in 1:length(models)){
models[[i]]$trans.rate<-trans.correct(models[[i]]$trans.rate, index=1)
models[[i]]$turnover<-drop.rate(models[[i]]$turnover, index=1)
models[[i]]$eps<-drop.rate(models[[i]]$eps, index=1)
}
for(i in 1:length(models)){
models[[i]]$trans.rate<-trans.correct(models[[i]]$trans.rate, index=3)
models[[i]]$turnover<-drop.rate(models[[i]]$turnover, index=3)
models[[i]]$eps<-drop.rate(models[[i]]$eps, index=3)
}
for(i in 1:length(models)){
models[[i]]$root.p<-set_root(n.hidden = (length(models[[i]]$turnover)/4), root = 4 )
}
models[[i]]$root.p<
models[[i]]$root.p
for(i in 1:length(models)){
models[[i]]$name<-as.character(models.meta$model.name)[i]
}
## set number of cores to use and a seed for mclapply
ncores=1 # remember that each StartingValueTry will take 10 cores (and will therefore be multiplied!!)
set.seed(12345)
## set up function to run either MuHiSSE with one set of starting values (for models with no hidden state; MuSSE) or trying 20 different starting values (for models with starting values).
run.muhisse<-function(i) do.call(StartingValueTry, args=models[[i]])
mclapply(FUN=run.muhisse,
X=1:length(models),
mc.cores = ncores)
setwd("~/Documents/amphibian_diversity_project/2021/muhisse_2022/gymno/")
phy<-read.tree("./gymno.tre")
dat.all<-read.csv("./gymno.csv", row.names = 1) ## all data
dat<-dat.all[phy$tip.label,]
name.check(phy, dat) ## should be OK
source("../aux_scripts/muhisse_functions.R")
# load custom functions and -SSE models
source("../aux_scripts/muhisse_functions.R")
source("../aux_scripts/muhisse_models_2022.R")
states<-data.frame(sp=rownames(dat), larva=dat$SSE_larva, adult=dat$SSE_adult)
head(states)
table(states$larva, useNA = "ifany")
table(states$adult, useNA = "ifany")
any(is.na(states)) ## warning!! should not contain NA's
## do a final plot to check things look right
plot(phy, show.tip.label=F)
tiplabels(pch=15,col=ifelse(states$larva==1, "mediumvioletred","gold"), cex=1)
tiplabels(pch=15,col=ifelse(states$adult==1, "mediumvioletred","gold"), cex=1, adj = 3)
# calculate sampling fraction
f<-c("00"=length(which(dat$SSE_larva==0 & dat$SSE_adult==0))/length(which(dat.all$SSE_larva==0 & dat.all$SSE_adult==0)),
"01"=length(which(dat$SSE_larva==0 & dat$SSE_adult==1))/length(which(dat.all$SSE_larva==0 & dat.all$SSE_adult==1)),
"10"=length(which(dat$SSE_larva==1 & dat$SSE_adult==0))/length(which(dat.all$SSE_larva==1 & dat.all$SSE_adult==0)),
"11"=length(which(dat$SSE_larva==1 & dat$SSE_adult==1))/length(which(dat.all$SSE_larva==1 & dat.all$SSE_adult==1))
)
f
f[is.na(f)]<-1 # update any NAs for states that don't exist (e.g. aquatic eggs and terrestrial larvae)
f
models<-lapply(models, FUN=append,
list(f=f,
phy=phy,
data=states,
root.type="madfitz",
root.p=NULL)) ## root.p will be set later, which should also nullify the root.type
for(i in 1:length(models)){
models[[i]]$trans.rate<-trans.correct(models[[i]]$trans.rate, index=1)
models[[i]]$turnover<-drop.rate(models[[i]]$turnover, index=1)
models[[i]]$eps<-drop.rate(models[[i]]$eps, index=1)
}
for(i in 1:length(models)){
models[[i]]$trans.rate<-trans.correct(models[[i]]$trans.rate, index=3)
models[[i]]$turnover<-drop.rate(models[[i]]$turnover, index=3)
models[[i]]$eps<-drop.rate(models[[i]]$eps, index=3)
}
for(i in 1:length(models)){
models[[i]]$root.p<-set_root(n.hidden = (length(models[[i]]$turnover)/4), root = 4 )
}
for(i in 1:length(models)){
models[[i]]$name<-as.character(models.meta$model.name)[i]
}
## set number of cores to use and a seed for mclapply
ncores=1 # remember that each StartingValueTry will take 10 cores (and will therefore be multiplied!!)
set.seed(12345)
## set up function to run either MuHiSSE with one set of starting values (for models with no hidden state; MuSSE) or trying 20 different starting values (for models with starting values).
run.muhisse<-function(i) do.call(StartingValueTry, args=models[[i]])
mclapply(FUN=run.muhisse,
X=1:length(models),
mc.cores = ncores)
save.image("muhisse_gymno.RData") # got spot to save workspace
# load starting value tries and select best try per model
file.names<-list.files("./starting_tries/")
file.path<-paste0("./starting_tries/", file.names)
all.fit<-list()
for(i in 1:length(file.names)){
load(file.path[i])
all.fit[[i]]<-tmp
}
all.fitrm(all.fit)
rm(all.fit)
all.fits<-list()
for(i in 1:length(file.names)){
load(file.path[i])
all.fits[[i]]<-tmp
}
starting.tries<-data.frame(file.no=1:length(all.fits),
name=gsub(file.names, pattern="_iter.*", replacement = ""),
aic=unlist(lapply(all.fits, `[[`,"AIC")),
loglik=unlist(lapply(all.fits, `[[`,"loglik")))
# pull out best performing try for each model
max.loglik<-starting.tries %>%
group_by(name) %>%
slice(which.max(loglik)) %>%
arrange(match(name,as.character(models.meta$model.name)))
max.loglik
View(starting.tries)
muhisse.fit<-all.fits[max.loglik$file.no]
model.performance<-data.frame(model=1:length(models),
model_type=models.meta$model.type,
model_name=models.meta$model.name,
lnL=sapply(muhisse.fit, '[[', 1),
AIC=sapply(muhisse.fit, '[[', 2),
AICc=sapply(muhisse.fit, '[[', 3))
model.performance$dAIC<-model.performance$AIC-min(model.performance$AIC)
model.performance$AW<-exp(-0.5*model.performance$dAIC)/sum(exp(-0.5*model.performance$dAIC))
(model.performance<-model.performance[order(model.performance$dAIC),])
write.table(model.performance, "muhisse_fit_biphasic_gymno.txt", quote=F, sep="\t", row.names = F)
best.models<-model.performance$model[!duplicated(model.performance$model_type)]
top.models<-model.performance$model[model.performance$AW>0.01]
muhisse_4states<-which(names(models)=="muhisse_full_4states")
rec.ids<-sort(unique(c(top.models, best.models, muhisse_4states)))
rec.ids
margin.rec<-list()
for(i in 1:length(rec.ids)){
id<-rec.ids[i]
n.hidden<-nrow(muhisse.fit[[id]]$trans.matrix)/4
margin.rec[[i]]<-MarginReconMuHiSSE(phy=muhisse.fit[[id]]$phy,
data=muhisse.fit[[id]]$data,
f=muhisse.fit[[id]]$f,
hidden.states = n.hidden,
par=muhisse.fit[[id]]$solution,
AIC=muhisse.fit[[id]]$AIC,
root.type=muhisse.fit[[id]]$root.type,
root.p=muhisse.fit[[i]]$root.p,
n.cores = 20)
print(paste0("...done with reconstruction ", i, " of " ,length(rec.ids)))
}
margin.rec[[i]]<-MarginReconMuHiSSE(phy=muhisse.fit[[id]]$phy,
data=muhisse.fit[[id]]$data,
f=muhisse.fit[[id]]$f,
hidden.states = n.hidden,
par=muhisse.fit[[id]]$solution,
AIC=muhisse.fit[[id]]$AIC,
root.type=muhisse.fit[[id]]$root.type,
root.p=muhisse.fit[[i]]$root.p,
n.cores = 10)
margin.rec<-list()
for(i in 1:length(rec.ids)){
id<-rec.ids[i]
n.hidden<-nrow(muhisse.fit[[id]]$trans.matrix)/4
margin.rec[[i]]<-MarginReconMuHiSSE(phy=muhisse.fit[[id]]$phy,
data=muhisse.fit[[id]]$data,
f=muhisse.fit[[id]]$f,
hidden.states = n.hidden,
par=muhisse.fit[[id]]$solution,
AIC=muhisse.fit[[id]]$AIC,
root.type=muhisse.fit[[id]]$root.type,
root.p=muhisse.fit[[i]]$root.p,
n.cores = 10)
print(paste0("...done with reconstruction ", i, " of " ,length(rec.ids)))
}
best.models<-model.performance$model[!duplicated(model.performance$model_type)]
top.models<-model.performance$model[model.performance$AW>0.01]
rec.ids<-sort(unique(c(top.models, best.models)))
rec.ids
margin.rec<-list()
for(i in 1:length(rec.ids)){
id<-rec.ids[i]
n.hidden<-nrow(muhisse.fit[[id]]$trans.matrix)/4
margin.rec[[i]]<-MarginReconMuHiSSE(phy=muhisse.fit[[id]]$phy,
data=muhisse.fit[[id]]$data,
f=muhisse.fit[[id]]$f,
hidden.states = n.hidden,
par=muhisse.fit[[id]]$solution,
AIC=muhisse.fit[[id]]$AIC,
root.type=muhisse.fit[[id]]$root.type,
root.p=muhisse.fit[[i]]$root.p,
n.cores = 10)
print(paste0("...done with reconstruction ", i, " of " ,length(rec.ids)))
}
names(margin.rec)<-as.character(model.performance$model_name)[match(rec.ids, model.performance$model)]
save.image("muhisse_gymno.RData") # got spot to save workspace
pdf("muhisse_gymno.pdf", paper="a4")
## do a final plot to check things look right
plot(phy, show.tip.label=F)
tiplabels(pch=15,col=ifelse(states$larva==1, "mediumvioletred","gold"), cex=1)
tiplabels(pch=15,col=ifelse(states$adult==1, "mediumvioletred","gold"), cex=1, adj = 3)
## plot net div rates with diversitree plot function
for(i in 1:length(margin.rec)){
plot.muhisse.states(margin.rec[[i]], rate.param="net.div", show.tip.label=FALSE)
legend("topright", bty="n", legend = names(margin.rec)[[i]])
}
save.image("muhisse_gymno.RData") # got spot to save workspace
library(gghisse)
library(gridExtra)
library(tidyverse)
plot.dat<-list()
for(i in 1:length(margin.rec)){
plot.dat[[i]]<-m_process_recon(margin.rec[[i]])
}
names(plot.dat)<-names(margin.rec)
names(plot.dat)
mod<-muhisse.fit[[model.performance$model[model.performance$model_type=="LhD"][1]]]
mod
mod<-muhisse.fit[[model.performance$model[model.performance$model_type=="LhD"][2]]]
mod
## get model parameters
muhisse.param<-m_collect_rates(model_fit=mod,
hidden_traits=mod$hidden.states,
character_states=c("nLnA","LnA","nLA","LA"))
muhisse.param
models.to.average<-as.character(model.performance$model_name) [match(model.performance$model,x=top.models)]
plot.dat$top.avg<-m_process_recon(margin.rec[models.to.average])
for(i in 1:length(plot.dat)){
params=c("net.div","speciation","extinction")
s<-list()
r<-list()
for(j in params){
s[[j]]<-m_scatterplot(plot.dat[[i]],
parameter = j,
states_names = c("impossibility","Direct", "Paedomorphic","Biphasic"),
colors = c("#2D2E83","#951B81", "grey","grey"))
if(sd(unlist(plot.dat[[i]]$tip_rates[j]))>0.00000001){
r[[j]]<-m_ridgelines(plot.dat[[i]],
parameter = j,
states_names = c("impossibility","Direct", "Paedomorphic","Biphasic"),
line_colors = c("#2D2E83","#951B81"),
fill_colors = c(NA,NA,NA,NA))
}
}
grid.arrange(nrow = 2, ncol=3, grobs=c(s,r), top=names(plot.dat)[i])
map.traits<-m_trait_recon(plot.dat[[i]],
show_tip_labels = FALSE,
states_of_first_character = c("no larva", "larva"),
states_of_second_character = c("no adult","adult"),
colors=c("gray","#2D2E83", "gold","#951B81"),
cutoff = 0.5,
tree_layout = "circular",
tree_direction = "right",
time_axis_ticks = 4,
open_angle = 10) +
theme(legend.position="bottom")
map.rates<-m_rate_recon(plot.dat[[i]],
show_tip_labels = FALSE,
parameter = "net.div",
discrete = FALSE,
breaks = seq(0, 1, 0.2),
colors = c("mediumvioletred","gold"),
plot_as_waiting_time = FALSE,
tree_layout = "circular",
tree_direction = "right",
time_axis_ticks = 4,
open_angle = 10) +
theme(legend.position="bottom")
grid.arrange(nrow = 1, ncol=2, map.traits,map.rates, top=names(plot.dat)[i])
}
######
#####################################################
### best muhisse model stats
names(plot.dat)
######
#####################################################
### best muhisse model stats
names(plot.dat)
plot.dat$LHD_1$tip_rates %>%
select(-id) %>%
mutate(state=factor(max.col(select(.,contains("state"))), labels = c("direct","biphasic"))) %>%
group_by(state) %>%
summarise_all(c(mean,sd)) %>%
print(width=400)
plot.dat$LhD_1$tip_rates %>%
select(-id) %>%
mutate(state=factor(max.col(select(.,contains("state"))), labels = c("direct","biphasic"))) %>%
group_by(state) %>%
summarise_all(c(mean,sd)) %>%
print(width=400)
best.mod.stats<-plot.dat$muhisse_full$tip_rates %>%
select(-id) %>%
mutate(state=factor(max.col(select(.,contains("state"))), labels = c("direct","biphasic"))) %>%
group_by(state) %>%
summarise_all(c(mean,sd)) %>%
print(width=400)
best.mod.stats<-plot.dat$LhD_1$tip_rates %>%
select(-id) %>%
mutate(state=factor(max.col(select(.,contains("state"))), labels = c("direct","biphasic"))) %>%
group_by(state) %>%
summarise_all(c(mean,sd)) %>%
print(width=400)
write.csv(best.mod.stats, "best_mod_tiprates_gymno.csv")
par(mfrow=c(1,4))
par(mar=c(4,1,4,1))
rep.cols=c("00"="grey", "10"="gold", "01"="#2D2E83", "11"="#951B81")
plot(phy, show.tip.label = F, main="Averaged tip rates")
plot(x=plot.dat$top.avg$tip_rates$net.div, y=1:Ntip(phy),
pch=16,
col=rep.cols[apply(MARGIN = 1, X=states[,2:3], paste0, collapse="")],
bty="n",
xlab = "r",ylab=NA, yaxt="n",
main="Net Diversification")
plot(x=plot.dat$top.avg$tip_rates$turnover, y=1:Ntip(phy),
pch=16,
col=rep.cols[apply(MARGIN = 1, X=states[,2:3], paste0, collapse="")],
bty="n",
xlab = "t",ylab=NA, yaxt="n",
main="turnover")
plot(x=plot.dat$top.avg$tip_rates$extinct.frac, y=1:Ntip(phy),
pch=16,
col=rep.cols[apply(MARGIN = 1, X=states[,2:3], paste0, collapse="")],
bty="n",
xlab = "e",ylab=NA, yaxt="n",
main="ext.fr")
# plots with node colours and size reflecting rate
par(mfrow=c(1,1))
n<-length(unique(round(plot.dat$top.avg$node_rates$net.div, 3)))
col.ramp<-colorRampPalette(c("midnightblue","mediumvioletred","coral","gold","olivedrab1","chartreuse3"), space="Lab")(n)
names(col.ramp)<-sort(unique(round(plot.dat$top.avg$node_rates$net.div, 3)))
plot(phy, show.tip.label = F, no.margin = T)
nodelabels(pch=16, cex=plot.dat$top.avg$node_rates$net.div*10, col=col.ramp[as.character(round(plot.dat$top.avg$node_rates$net.div, 3))])
# plot rate densities through time
par(mfrow=c(1,1))
par(mar=c(4,4,4,4))
best.node.state<-apply(X=plot.dat$top.avg$node_rates[,2:5], MAR=1, which.max)
node.dates<-tail(node.depth.edgelength(phy),phy$Nnode)
node.dates<-max(node.dates)-node.dates
plot(plot.dat$top.avg$node_rates$net.div~node.dates,
pch=16,
col=rep.cols[apply(MARGIN = 1, X=states[,2:3], paste0, collapse="")],
xlim=c(250,0))
binned <- data.frame(dates=node.dates,round.dates=round(node.dates), rates=plot.dat$top.avg$node_rates$net.div, state=best.node.state) %>%
group_by(round.dates, state) %>%
summarise_all(mean)
ggplot(binned, aes(x=round.dates, y=rates, group=state)) +
scale_color_manual(labels = c("direct", "biphasic"), values = c("#2D2E83","#951B81")) +
geom_smooth(aes(colour=factor(state)), method='loess') +
scale_x_reverse() +
theme_light()
####
save.image("muhisse_biphasic_gymno.RData")
####
saveRDS(plot.dat, file = "plot_dat_biphasic_gymno.rds")
dev.off()
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
data$T3 <- as.factor(sample(LETTERS[1:3], size = nrow(data), replace = T))
data<-data[,c(1,4)]
head(data)
# run corHMM with ARD model and 2 rate categories
MK_3state_ard <- corHMM(phy = phy, data = data, model = "ARD", rate.cat = 2, get.tip.states = T)
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
data$T3 <- as.factor(sample(LETTERS[1:3], size = nrow(data), replace = T))
data<-data[,c(1,4)]
head(data)
# run corHMM with ARD model and 2 rate categories
MK_3state_ard <- corHMM(phy = phy, data = data, model = "ARD", rate.cat = 2, get.tip.states = T)
# run corHMM with ARD model and 2 rate categories
MK_3state_ard <- corHMM(phy = phy, data = data, rate.cat = 2, get.tip.states = T)
data
phy
names(data)==phy$tip.label
# run corHMM with ARD model and 2 rate categories
MK_3state_ard <- corHMM(phy = phy, data = data, rate.cat = 2, get.tip.states = T)
# run corHMM with ARD model and 2 rate categories
MK_3state_ard <- corHMM(phy = phy, data = data, rate.cat = 1, get.tip.states = T)
# run corHMM with ARD model and 2 rate categories
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1)
data(primates)
phy <- multi2di(primates[[1]])
data <- primates[[2]]
# run corHMM with ARD model and 2 rate categories
MK_3state <- corHMM(phy = phy, data = data, rate.cat = 1)
